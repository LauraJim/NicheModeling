[["index.html", "Index 1 Introduction", " Index Laura Jiménez and Carola Franzen August 2021 1 Introduction Our package contains all the functions needed to estimate the climatic fundamental niche of a species in a multivariate space defined by two or three environmental variables. We included three different statistical models to estimate the fundamental niche: Mahalanobis model, which assumes that occurrences are observed according to a normal distribution and that ellipses are biologically realistic model to represent the border of the fundamental niche. Under this approach, it is implicitly assumed that every environmental combination in niche space is equally likely to be observed in a sample of occurrences. Weigthed-normal model sensu Jimenez &amp; Soberón (2021), this model has the same assumptions as the Mahalanobis model regarding the shape of the fundamental niche, however, it takes into account that not all the environmental combinations in niche space have the same probability of being observed in a sample of occurrences. Bayesian normal model sensu Jiménez et al. (2019), which takes the Mahalanobis as the underlying models for the fundamental niche of a species and assumes that there is relevant a priori information that can be incorporated into de model, usually from physiological experiments. Additionally, we included the functions used to apply the evaluation method based on a hypergeometric test presented by Jiménez &amp; Soberón (2020). The main goal of this tutorial is to provide worked examples that teach you how to use all the functions included in the package. Although we chose two arbitrary species as our focus species (a hummingbird, Threnetes ruckeri, and a butterfly, Catasticta nimbice), you should be able to apply all the functions to any species and any geographic region. In the following section, we provide a detailed description of the datasets that are included in the package and that can be used to reproduce all the examples, as well as to prepare other datasets for future analysis with other species and study regions. 1.0.1 Organization within the tutorial In each section of the tutorial, you will find a section called Input data which will indicate which are the files that you need beforehand to be able to reproduce the examples, and, a section called Output data which indicates what are the files that you would generate after reproducing the examples. In some cases, we only show how to make the analysis for one of the species and ask you to repeat the analysis for the second species as an exercise. It is important that you generate all the files listed in the Output data section since they will be used in subsequent sections of the tutorial. Here is a list of the different sections within the tutorial and the corresponding functions of the package that are used in that specific section; the input and output files are also listed. Topic Functions Input.files Output.files Description of initial datasets Catasticta_nimbice_occ_G.csv; Catasticta_nimbice_M_GE.csv; Catasticta_nimbice.shp; Threnetes_ruckeri_occ_G.csv; Threnetes_ruckeri_M.csv; Threnetes_ruckeri.shp; bio1.asc; bio6.tif; bio12.asc cn_bio1_cropped.tif; cn_bio6_cropped.tif; cn_bio12_cropped.tif; tr_bio1_cropped.tif; tr_bio6_cropped.tif; tr_bio12_cropped.tif Getting environmental values for the study sites get.Ecoord bio1.asc; bio12.asc; Catasticta_nimbice_occ_G.csv; Threnetes_ruckeri_M_G.csv Catasticta_nimbice_occ_GE.csv; Threnetes_ruckeri_occ_GE.csv; Threnetes_ruckeri_M_GE.csv; Catasticta_nimbice_M_GE.csv Plotting our datasets in G-space and E-space GEspace Catasticta_nimbice_occ_GE.csv; Catasticta_nimbice_M_GE.csv; Catasticta_nimbice.shp; Threnetes_ruckeri_M_GE.csv; Threnetes_ruckeri_occ_GE.csv; Threnetes_ruckeri.shp Catasticta_nimbice_bckgrndmap.png; Catasticta_nimbice_polymap.png; Threnetes_bckgrndmap.png; Threnetes_polymap.png Mahalanobis model: raw occurrence data only get.Ecoord; nicheG Threnetes_ruckeri_occ_GE.csv; Catasticta_nimbice_occ_G.csv; cn_bio1_cropped.tif; cn_bio6_cropped.tif; cn_bio12_cropped.tif Catasticta_nimbice_occ_GE3.csv; Catasticta_nimbice_maha3_cropped.tif Plotting an ellipsoid in E-space E.ellipse2d; E.ellipse3d Threnetes_ruckeri_occ_GE.csv; Catasticta_nimbice_occ_GE.csv; Catasticta_nimbice_occ_GE3.csv How to simulate a random sample of environmental conditions inside an region rs.inE bio1.asc; bio12.asc; Catasticta_nimbice.shp; Catasticta_nimbice_occ_GE.csv; Threnetes_ruckeri.shp; Catasticta_nimbice_M_E.csv How to identify points inside and outside the fundamental niche el.in Threnetes_ruckeri_M_GE.csv; Threnetes_ruckeri_occ_GE.csv; Catasticta_nimbice_occ_GE.csv; Catasticta_nimbice_M_GE.csv Weighted-normal model: accounting for the uneven availability of environmental conditions fitNiche; negloglike; rs.inE bio1.asc; bio12.asc; Catasticta_nimbice.shp; Catasticta_nimbice_occ_GE.csv; Threnetes_ruckeri.shp; Threnetes_ruckeri_occ_GE.csv cn_mu_sigma_estimates.csv; tr_mu_sigma_estimates.csv Projecting an estimated niche into G-space nicheG bio1.asc; bio12.asc; Catasticta_nimbice_occ_GE.csv; tr_mu_sigma_estimates.csv; Threnetes_ruckeri_occ_GE.csv Catasticta_nimbice_maha_map.tif; Catasticta_nimbice_wn_map.tif; Catasticta_nimbice_wn_map_ggplot.png; Threnetes_ruckeri_wn_map.tif; Threnetes_ruckeri_maha_map.tif; Threnetes_ruckeri_nicheG_ggplot.png Evaluation method: building accumulation curve of occurrences get.table; get.curve; plot.aco; accum.occ; Bayesian model: adding tolerance limits DefineSp; priorpar; Supp; Energy; Initth; PlotXYEnvVars; PlotIterations; save.all Threnetes_ruckeri_occ_GE.csv; Threnetes_ruckeri_M_GE.csv; T_ruckeri_tolerances.csv Threnetes_ruckeri_10000_output.csv; tr_bay_mu_sigma_estimates.csv; tr_bay_cropped.tif 1.0.2 References Jimenez, L. &amp; Soberón, J. (2021). Estimating the fundamental niche: accounting for the uneven availability of existing climates. bioRxiv. Jiménez, L. &amp; Soberón, J. (2020). Leaving the area under the receiving operating characteristic curve behind: An evaluation method for species distribution modelling applications based on presence-only data. Methods in Ecology and Evolution, 11, 15711586. Jiménez, L., Soberón, J., Christen, J.A. &amp; Soto, D. (2019). On the problem of modeling a fundamental niche from occurrence data. Ecological Modelling, 397, 7483. "],["description-of-initial-datasets.html", "2 Description of initial datasets 2.1 Species under study and necessary files to start an analysis", " 2 Description of initial datasets 2.1 Species under study and necessary files to start an analysis We selected two species as our focus species for all the analysis and examples: Threnetes rucheri, the band-tailed barbthroat hummingbird, resident from Central America. Catasticta nimbice, the pine white or Mexican dartwhite butterfly, known to occur from Costa Rica north to Mexico. Four types of files are needed to reproduce the ecological niche modeling exercises included in this tutorial: A csv file that contains the geographic coordinates of the sites where the species has been recorded as present, A shapefile containing a polygon which delimits the study region, Raster files with the environmental variables to be used in the analysis and an extent larger or equal to the extent of the shapefile, A csv file that contains tolerance limits of a species. Below, we describe the files that we created for our two focus species so you can create similar files for the species of your interest. 2.1.1 Occurrence data The tables used for this package are matrices that contain the location information of a species observation. Only presence data is used as absence data plays no role for the models employed. Occurrence data is available on various open databases. For all examples, data from GBIF was used. However, the tables from GBIF need to be cleaned up before they can be used as the database is aggregated from various sources with different formats and can contain various errors. There are packages available that aid in the cleaning of the data (e.g. see CoordinateCleaner). The tables for the examples have been cleaned and contain three columns: species name, longitude, latitude. These occurrence tables with three columns are called G.occ. # table with a species occurrence G.occ &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_occ_G.csv&quot;,header=T) head(G.occ, n=3) ## species Longitude Latitude ## 1 Catasticta nimbice -96.50500 16.06139 ## 2 Catasticta nimbice -96.50083 16.16944 ## 3 Catasticta nimbice -96.57000 16.31722 G.occ2 &lt;- read.csv(&quot;./Initial_Data/Threnetes_ruckeri_occ_G.csv&quot;,header=T) head(G.occ2, n=3) ## species long lat ## 1 Threnetes_ruckeri -79.42474 9.225965 ## 2 Threnetes_ruckeri -84.01280 10.428800 ## 3 Threnetes_ruckeri -82.95325 9.867804 2.1.1.1 How to plot occurrence data using ggplot # Set the boundaries to which the worldmap is cut ext &lt;- extent(-115, -68, -8, 35) # worldmap is added from the rnaturalearth packages world &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) class(world) # create dataframe for ggplot with both points cn.occ &lt;- data.frame(longitude = G.occ[, 2], latitude = G.occ[, 3]) thr.occ &lt;- data.frame(longitude = G.occ2[, 2], latitude = G.occ2[, 3]) data &lt;- cbind(rbind(cn.occ[,1:2],thr.occ[,1:2]), c(rep(1,nrow(cn.occ)),rep(2,nrow(thr.occ)))) data2 &lt;- data.frame(Longitude = data[, 1], Latitude = data[, 2], Type = data[,3]) # create plot ggplot(data = world) + geom_sf( ) + theme_bw() + coord_sf(xlim = c(ext[1], ext[2]), ylim = c(ext[3],ext[4]), expand = FALSE) + theme(panel.grid.major = element_line(color = &quot;white&quot;), panel.background = element_rect(fill = &quot;aliceblue&quot;)) + geom_point(data = data2, alpha=0.5, aes(x = Longitude, y = Latitude, color=factor(Type), shape=factor(Type))) + scale_shape_manual(values= c(19, 19), guide = FALSE) + scale_color_manual(name = &quot;Occurrences&quot;, labels = c(&quot;Catasticta nimbice&quot;, &quot;Threnetes ruckeri&quot;), values= c(&quot;1&quot; = &quot;seagreen4&quot;, &quot;2&quot; = &quot;royalblue3&quot;)) + theme(legend.position = c(.03, .05), legend.justification = c(&quot;left&quot;, &quot;bottom&quot;)) Figure 2.1: Figure of the of the two species Catasticta nimbice and Threnetes ruckeri . 2.1.2 Points inside the study area to plot Hutchinsons duality There are two other tables that are used for the functions of this package. They contain random samples of locations of the study area. These points serve as background points for various graphs. The first table is contains two columns with the longitude and latitude of sampled locations for the species Threnetes ruckeri. thrM &lt;- read.csv(&quot;./Initial_Data/Threnetes_ruckeri_M_G.csv&quot;,header=T) head(thrM, n=3) ## long lat ## 1 -71.58333 6.250003 ## 2 -83.91666 11.916670 ## 3 -69.74999 9.916670 dim(thrM) ## [1] 599 2 The second table contains four columns. In addition to the longitude and latitude of random locations of the study are for the species Catasticta nimbice the correlating environmental data for mean annual temperature and total annual precipitation. This file can be created by extracting the environmental data from raster layers with the function get.ecoord (see tutorial). cnM.GE &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_M_GE.csv&quot;,header=T) head(cnM.GE, n=3) ## long lat bio1 bio12 ## 1 -98.08333 20.41667 194 2307 ## 2 -97.91667 20.25000 199 2587 ## 3 -99.08333 21.41667 184 1781 dim(cnM.GE) ## [1] 7486 4 2.1.3 Table with species tolerance limit The table for a species tolerance limit contains the lower and upper limits of an environmental condition. In the example provided, we estimated these limits for the species Threnetes ruckeri, which is necessary information for using the Bayesian model (see Tutorial Bayesian model). Please keep in mind that the provided example is not estimated with a scientific method and only meant to aid in using and understanding the tutorial. For scientific research, the tolerance limits of a species need to be tested within a controlled lab environment. The matrix needs to have at two columns that provide the lower limit in the first column, and the upper limit in the second column. There should be as many rows as environmental conditions (usually two). The example contains the estimated tolerance limits for the mean annual temperature (MAT) and the total annual precipitation (AP). (limits &lt;- read.csv(&quot;./Initial_Data/T_ruckeri_tolerances.csv&quot;)) ## variable minimum maximum units ## 1 MAT 200 300 C*10 ## 2 AP 500 5000 mm Table 2.1: Threnetes ruckeri tolerance limits variable minimum maximum units MAT 200 300 C*10 AP 500 5000 mm 2.1.4 Polygons of the study area The functions often use a polygon of the region of interest either to serve as a boundary in plots or to delimit rasters or sampled points to the specific region. The polygons used in the examples are shapefiles. cn.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Catasticta_nimbice&quot;) thr.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Threnetes_ruckeri&quot;) # in order to plot the shapefiles, they need to be adjusted first # transform polygon into WGS 84 cnM &lt;- spTransform(cn.shp, CRS(&quot;+proj=longlat +datum=WGS84&quot;)) # This function turns a map into a data frame that can more easily be # plotted with ggplot2. cnM &lt;- fortify(cnM) # takes id that is a &quot;character&quot; and converts it to a number cnM$id = as.numeric(cnM$id) thrM &lt;- spTransform(thr.shp, CRS(&quot;+proj=longlat +datum=WGS84&quot;)) # This function turns a map into a data frame that can more easily be # plotted with ggplot2. thrM &lt;- fortify(thrM) # takes id that is a &quot;character&quot; and converts it to a number thrM$id = as.numeric(thrM$id) # worldmap is added from the rnaturalearth packages world &lt;- ne_countries(scale = &quot;medium&quot;, returnclass = &quot;sf&quot;) class(world) # plot in ggplot ggplot(data = world) + geom_sf( ) + theme_bw() + # alpha -&gt; transparency of polygon, 0.1 = high, 0.5 = medium transparency geom_map(map=cnM, data=cnM, aes(map_id=id), color= &quot;springgreen3&quot;, fill = &quot;springgreen3&quot;, size = 1, alpha = 0.2) + geom_map(map=thrM, data=thrM, aes(map_id=id), color= &quot;royalblue3&quot;, fill = &quot;royalblue3&quot;, size = 1, alpha = 0.2) + coord_sf(xlim = c(-120, -65), ylim = c(-10, 35), expand =TRUE) + theme(panel.grid.major = element_line(color = &quot;white&quot;), panel.background = element_rect(fill = &quot;aliceblue&quot;)) Figure 2.2: Figure of the shapefiles for the study area of Catasticta nimbice (green) and Threnetes ruckeri (blue). 2.1.5 Rasters with environmental information The raster files for the functions of this package need to contain information on climatic values that are of interest for the user. The rasters used in the examples are from WorldClim and have a resolution of 10 minutes. The files usually do not need further editing. For our examples, we used the raster of the American continent. The environmental conditions of interest are the mean annual temperature, called bio1 and the the total mean precipitation, called bio12. # raster for mean annual temperature (°C x 10) bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) # raster for minimum temperature of the coldest month (°C x 10) bio6 &lt;- raster(&quot;./Initial_Data/bio6.tif&quot;) # raster for mean total precipitation (mm) bio12 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) The raster can simply be plotted by using the plot() function: bios &lt;- stack(bio6, bio12) plot(bios) Figure 2.3: Figure of the of the coldest month of the year (in °C x 10) and the total annual precipitation (in mm) for the American continent. Another option to plot the raster is the spplot() function of the sp package: spplot(bio1) Figure 2.4: Figure of the of the mean annual temperature (in °C, multiplied by 10) for the American continent.. 2.1.5.1 How to crop raster layers You need to run this examples and save the resulting raster layers because these will be used in the exercises. # cropped by the shapefile for Catasticta nimbice study area bio1cn &lt;- mask(crop(bio1, cn.shp), cn.shp) bio6cn &lt;- mask(crop(bio6, cn.shp), cn.shp) bio12cn &lt;- mask(crop(bio12, cn.shp), cn.shp) # cropped by the shapefile for Threnetes ruckeri study area bio1thr &lt;- mask(crop(bio1, thr.shp), thr.shp) bio6thr &lt;- mask(crop(bio6, thr.shp), thr.shp) bio12thr &lt;- mask(crop(bio12, thr.shp), thr.shp) Example plot for the cropped raster bio6 (in ggplot): # calculate raster to points for ggplot bio6thr.p &lt;- rasterToPoints(bio6thr) bio6thr.pd &lt;- data.frame(bio6thr.p) colnames(bio6thr.pd) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;, &quot;MinTemp&quot;) # x11() ggplot() + geom_tile(data = bio6thr.pd,aes(x=Longitude, y=Latitude, fill=MinTemp)) + theme_bw() + scale_fill_gradient2(&quot;Minimum Temperature (°C x 10)&quot;,limits=c(50,300), low = &#39;royalblue3&#39;, mid=&#39;seagreen3&#39;, high = &#39;gold2&#39;,na.value = NA, midpoint = 200, n.breaks=6) Save the rasters for later use writeRaster(bio1cn,&quot;./Generated_Data/cn_bio1_cropped.tif&quot;, overwrite = T) writeRaster(bio6cn,&quot;./Generated_Data/cn_bio6_cropped.tif&quot;, overwrite = T) writeRaster(bio12cn,&quot;./Generated_Data/cn_bio12_cropped.tif&quot;, overwrite = T) writeRaster(bio1thr,&quot;./Generated_Data/tr_bio1_cropped.tif&quot;, overwrite = T) writeRaster(bio6thr,&quot;./Generated_Data/tr_bio6_cropped.tif&quot;, overwrite = T) writeRaster(bio12thr,&quot;./Generated_Data/tr_bio12_cropped.tif&quot;, overwrite = T) Additionally, note that you can use this code to crop and mask any raster layer to the study area of each species. This is something you will need to do before doing some future examples. "],["extracting-environmental-data-from-raster-files-from-a-set-of-geographic-coordinates.html", "3 Extracting environmental data from raster files from a set of geographic coordinates 3.1 Worked Examples", " 3 Extracting environmental data from raster files from a set of geographic coordinates The function get.Ecoord is a simple tool to extract environmental data, such as annual mean temperature or total annual precipitation, from raster-files that contain this type of information. The extracted data is then combined with the occurrence coordinates of a species. The output is a matrix that contains four or more columns: the coordinates of the species occurrence (latitude and longitude) and the environmental variables for those coordinates. The same function can also be used to extract environmental data and combine it with random points of a study area if a matrix with random points is available. get.Ecoord(Estck, Gcoord, Enames) 3.0.1 Parameters For this function, three parameters are necessary: Estck = a raster stack that has two or more climatic layers Gcoord = a matrix with two columns whose rows are geographic coordinates of species occurrence in the study area Enames = names for the extracted environmental variables in form of a character vector for the output table 3.0.2 Input and Output The input for the function are raster files with climatic values and presence information of a species (for more information on these files, see the explanation for the initial dataset that comes along with this package). The output of the function is a matrix with at least four variables. The first two columns are the longitude and latitude coordinates of the species occurrence. The following columns are the environmental data that has been extracted from the raster files. The matrix can be saved as a csv-file that serves as data input for other functions. 3.0.3 Dependencies Function: dismo 3.1 Worked Examples 3.1.1 Read source code and libraries source(&quot;.\\\\Functions\\\\getEcoord.R&quot;) library(dismo) 3.1.2 Catasticta nimbice Input Files bio1.asc bio12.asc Catasticta_nimbice_occ_G.csv Catasticta_nimbice_M_G.csv To create the parameter Estck, two or more rasters are combined into one rasterstack. For this species we used rasters with the environmental conditions mean annual temperature (= bio1) and total annual precipitation (= bio12). The created rasterstack will have as many layers as rasters are combined together. In this example, there are only two layers: bio1 and bio12. # read raster files bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) bio12 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) # combine the rasters into a RasterStack bios &lt;- stack(bio1, bio12) # = Estck The parameter Gcoord is a matrix with coordinates of the tracked occurrence of Catasticta nimbice. The cleaned table can be directly read without much modification. # read table, set header and omit first column of the table occ &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_occ_G.csv&quot;,header=T)[,-1] # = Gcoord head(occ, n=3) ## Longitude Latitude ## 1 -96.50500 16.06139 ## 2 -96.50083 16.16944 ## 3 -96.57000 16.31722 In order to set names for the new columns that will be created by the function, the parameter Enames will be set with as many names as rasters have been stacked. In this example, the first column name is bio1 and the second is bio12. # write names for the column heads of the environmental data names1 &lt;- c(&quot;bio1&quot;, &quot;bio12&quot;) # = Enames Apply get.Ecoord with the parameters Estck, Gcoord, and Enames: cn.GE &lt;- get.Ecoord(Estck=bios, Gcoord=occ, Enames=names1) head(cn.GE, n=3) ## Longitude Latitude bio1 bio12 ## 1 -96.50500 16.06139 191 1249 ## 2 -96.50083 16.16944 175 1029 ## 3 -96.57000 16.31722 175 1029 Save the output as a csv-file (but do not run every time): write.csv(cn.GE,file=paste0(&quot;./Generated_Data/Catasticta_nimbice&quot;,&quot;_occ_GE.csv&quot;), row.names = F) This csv-file can now be used as data input for various graphs that highlight the geographical presence of the species and the surrounding environment. Output files Catasticta_nimbice_occ_GE.csv Catasticta_nimbice_M_GE.csv Catasticta_nimbice_occ_GE3.csv (see tutorial Mahalanobis model for detailed steps) 3.1.3 Threnetes ruckeri Input files bio1.asc bio12.asc Threnetes_ruckeri_M_G.csv Threnetes_ruckeri_occ_G.csv The raster datasets for the species Threnetes ruckeri and names (bio1 and bio12) are the same as the above example. bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) bio12 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) bios &lt;- stack(bio1, bio12) names1 &lt;- c(&quot;bio1&quot;, &quot;bio12&quot;) Unlike the previous example, random points of a study area instead of the occurrence points are combined with extracted environmental data that can be used as a background for maps (e.g. in the tutorials Function GEspace and Function el.in). # read table with random points bckgrnd &lt;- read.csv(&quot;./Initial_Data/Threnetes_ruckeri_M_G.csv&quot;,header=T) head(bckgrnd, n=3) ## long lat ## 1 -71.58333 6.250003 ## 2 -83.91666 11.916670 ## 3 -69.74999 9.916670 trM.GE &lt;- get.Ecoord(Estck=bios, Gcoord=bckgrnd, names1) head(trM.GE, n=3) ## long lat bio1 bio12 ## 1 -71.58333 6.250003 263 2588 ## 2 -83.91666 11.916670 256 4614 ## 3 -69.74999 9.916670 239 586 Save the output as a csv-file (but do not run it every time): write.csv(trM.GE,file=paste0(&quot;./Generated_Data/Threnetes_ruckeri_M&quot;,&quot;_GE.csv&quot;), row.names = F) Now, repeat this example but using the data of Catasticta nimbice, and save a file called Catasticta_nimbice_M_GE.csv Output files Threnetes_ruckeri_M_GE.csv Threnetes_ruckeri_occ_GE.csv "],["creating-plots-with-the-geographical-and-environmental-space-of-a-species-in-ggplot2.html", "4 Creating plots with the geographical and environmental space of a species in ggplot2 4.1 Worked Examples", " 4 Creating plots with the geographical and environmental space of a species in ggplot2 The function GEspace is a tool that can plot the geographical and environmental space of a species presence in ggplot2. The output is a plot with a geographical map with occurrence points and a graph of the occurrence in relation to the environmental data, such as annual mean temperature or total annual precipitation, next to it. Depending on the data input, the function GEspace will create a plot with a polygon or random background points as a geographical space. GEspace(bckgrnd, E.occ, add.poly = NULL, save.p = NULL) The default option (no polygon added, no graph saved) will create a map of the study area based on the coordinates of random background points and the occurrence points of a species. If the user adds a polygon with add.poly, it will be used alongside a worldmap from the rnaturalearth packages for the mapping of the geographical space. The coordinate system used is WGS 84. If save.p is added to the function, then the graph will be saved, if not, a window with the graph will pop up. 4.0.1 Parameters For this function, two parameters are necessary and a two more can be added: E.occ = a matrix with occurrence and corresponding environmental data of a species bckgrnd = a matrix with random points from a specific geographic region and corresponding environmental data add.poly = a polygon of the study area (optional) save.p = saves the file to your set output folder (optional) 4.0.2 Input and Output The occurrence and background points with environmental information can be created by using the function get.Ecoord (see tutorial Getting environmental values for the study sites). It is important to note that both parameters, the matrices for E.occ and bckgrnd, need to have the same structure: the first two columns contain the coordinates, with longitude in the first column and latitude in the second. The following columns need to contain the environmental data of interest. Other than these matrices with occurrences and random background points, a polygon can be used to define the area of study. The output is a plot with two graphs. On the left side is the geographical space and on the right side is the environmental space (with two environmental conditions) of a species occurrence. The output varies depending on how the function is applied. If a polygon is added, the background for the geographical space will be a clipped worldmap from the rnaturalearth packages overlayed with the polygon of the study area. If no polygon is added, the background will consist of random points of the study area. 4.0.3 Dependencies Function: rgdal, raster, ggplot2, rnaturalearth, rnaturalearthdata, ggpubr, sf, rgeos 4.1 Worked Examples 4.1.1 Read source code and libraries source(&quot;.\\\\Functions\\\\GEspace.R&quot;) library(rgdal) library(raster) library(ggplot2) library(rnaturalearth) library(rnaturalearthdata) library(ggpubr) # package &quot;sf&quot; needs to be installed, but not loaded # package &quot;rgeos&quot; needs to be installed, but not loaded 4.1.2 Catasticta nimbice Input files Catasticta_nimbice_occ_GE.csv Catasticta_nimbice_M_GE.csv Catasticta_nimbice.shp (and associated files) In this example the number of background points is above 1000 and the point size is reduced in order to keep a clear display of points. # read table of a species occurrence with environmental data points and table # with random background points that contain environmental data species &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T) ranpoints &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_M_GE.csv&quot;,header=T) If a polygon of the distribution area is available, it can be added as a parameter. # read polygon shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Catasticta_nimbice&quot;) If the graph is to be saved, the location and name can be set. saveM &lt;- &quot;./Generated_Data/Catasticta_nimbice&quot; Apply GEspace (but do not run every time): No polygon added (default), no save.p added (default): A graph will pop up &amp; the geographical background will be made of random points. GEspace(bckgrnd=ranpoints, E.occ=species) Figure 4.1: Figure of the geographical space with random points as a background (left) and the environmental space (right) of Catasticta nimbice . No polygon added (default), save.p added: The graph will be saved &amp; the geographical background will be made of random points. GEspace(bckgrnd=ranpoints, E.occ=species, save.p = paste0(saveM, &quot;_bckgrndmap.png&quot;)) With polygon, no save.p added (default): A graph will pop up &amp; the geographical background will be made of a polygon. GEspace(bckgrnd=ranpoints, E.occ=species, add.poly=shp) With polygon, save.p added: A graph will pop up &amp; the geographical background will be made of a polygon. GEspace(bckgrnd=ranpoints, E.occ=species, add.poly=shp, save.p = paste0(saveM, &quot;_polymap.png&quot;)) Figure 4.2: Figure of the geographical space with a polygon and clipped worldmap as a background (left) and the environmental space (right) of Catasticta nimbice . Output files Catasticta_nimbice_bckgrndmap.png Catasticta_nimbice_polymap.png 4.1.3 Threnetes ruckeri Input files Threnetes_ruckeri_M_GE.csv Threnetes_ruckeri_occ_GE.csv Threnetes_ruckeri.shp (and associated files) In this example the number of background points is below 1000 and the point size is not reduced. # read necessary files ranpoints2 &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_M_GE.csv&quot;,header=T) species2 &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T) shp2 &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Threnetes_ruckeri&quot;) Apply the function with a polygon. GEspace(bckgrnd = ranpoints2, E.occ = species2, add.poly = shp2, save.p = &quot;Threnetes_bckgrndmap.png&quot;) GEspace(bckgrnd = ranpoints2, E.occ = species2, add.poly = shp2) Figure 2.4: Figure of the geographical space with random points as a background (left) and the environmental space (right) of Threnetes ruckeri . Apply the function without a polygon. GEspace(bckgrnd = ranpoints2, E.occ = species2, save.p = &quot;Threnetes_polymap.png&quot;) GEspace(bckgrnd = ranpoints2, E.occ = species2) Figure 4.3: Figure of the geographical space with a polygon and clipped worldmap as a background (left) and the environmental space (right) of Threnetes ruckeri . Output files Threnetes_bckgrndmap.png Threnetes_polymap.png "],["mahalanobis-model-raw-occurrence-data-only.html", "5 Mahalanobis model: raw occurrence data only 5.1 Worked Examples 5.2 Threnetes ruckeri - example with two environmental layers 5.3 Catasticta nimbice", " 5 Mahalanobis model: raw occurrence data only 5.0.1 Input and Output In order to calculate the Mahalanobis distance and Mahalanobis model, mu and Sigma (covariance) of variables are necessary. This could, for example be the environmental data that has been correlated to the geographic occurrence data of a species. The output of mu and Sigma can be further processed into an ellipse or a suitability map. 5.0.2 Dependencies Functions: dismo, raster Examples: rgdal, tools, sp 5.1 Worked Examples 5.1.1 Read Source Code and Libraries source(&quot;.\\\\Functions\\\\getEcoord.R&quot;) source(&quot;.\\\\Functions\\\\nicheG.R&quot;) library(dismo) library(raster) library(rgdal) library(tools) library(sp) library(ggplot2) library(ggpubr) 5.2 Threnetes ruckeri - example with two environmental layers Input Data Threnetes_ruckeri_occ_GE.csv Read table with environmental data that are the basis for the calculation of the Mahalanobis distance. thr.occ_E &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T)[,-(1:2)] The centroid is calculated by taking the means of the two columns (mu) in the matrix with two environmental layers. This parameter will set the values of the maximum likelihood estimate. (center &lt;- colMeans(thr.occ_E)) ## bio1 bio12 ## 244.7135 2894.1345 Calculate the covariance of the environmental data (Sigma). (boundary &lt;- cov(thr.occ_E)) ## bio1 bio12 ## bio1 420.7939 -1367.22 ## bio12 -1367.2201 816368.46 Here, add example on how to plot the principal axis of the estimated ellipse (use this example: ) 5.3 Catasticta nimbice 5.3.1 1) Get environmental information from three raster layers Input Data Catasticta_nimbice_occ_G.csv cn_bio1_cropped.tif cn_bio6_cropped.tif cn_bio12_cropped.tif Read necessary files from the Generated_Data folder for Catasticta nimbice: a matrix with coordinates of species observations (latitude and longitude) and the three (cropped) raster layers for bio1, bio6, and bio12. # read occurrence data occ_G &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_occ_G.csv&quot;,header=T)[,-1] # read raster files bio1cn &lt;- raster(&quot;./Generated_Data/cn_bio1_cropped.tif&quot;) bio6cn &lt;- raster(&quot;./Generated_Data/cn_bio6_cropped.tif&quot;) bio12cn &lt;- raster(&quot;./Generated_Data/cn_bio12_cropped.tif&quot;) Prepare the parameters: create a rasterstack of the cropped environmental layers and create a vector with the environmental layer names. # stack the layers bios &lt;- stack(bio1cn, bio6cn, bio12cn) # create vector with names in same order as stack E.names &lt;- c(&quot;bio1&quot;, &quot;bio6&quot;, &quot;bio12&quot;) Apply function cn.GE3 &lt;- get.Ecoord(Estck = bios, Gcoord = occ_G, Enames = E.names) head(cn.GE3, n=4) ## Longitude Latitude bio1 bio6 bio12 ## 1 -96.50500 16.06139 191 111 1249 ## 2 -96.50083 16.16944 175 89 1029 ## 3 -96.57000 16.31722 175 89 1029 ## 4 -92.63844 16.62883 185 107 1309 Write as csv write.csv(cn.GE3,file=paste0(&quot;./Generated_Data/Catasticta_nimbice_occ_GE3.csv&quot;), row.names = F) Output Data Catasticta_nimbice_occ_GE3.csv 5.3.2 2) Estimate Mahalanobis Model Parameters Input Data Catasticta_nimbice_occ_GE3.csv Prepare parameters for the function niche.G. For this, a table with only the variables is necessary. occ_E &lt;- cn.GE3[,-(1:2)] The centroid is calculated by taking the means of the two columns in the matrix (mu). This parameter will set the values of the maximum likelhood estimate. center &lt;- colMeans(occ_E) Calculate the covariance of the environmental data (Sigma). boundary &lt;- cov(occ_E) 5.3.3 3) Calculate Suitability Index Apply function cn.maha &lt;- niche.G(Estck = bios, mu = center, Sigma = boundary) Save resulting raster. This file will be necessary for further calculations. writeRaster(cn.maha, &quot;./Generated_Data/cn_maha3_cropped.tif&quot;, overwrite= T) Plot. plot(cn.maha) Output Data Catasticta_nimbice_maha3_cropped.tif 5.3.4 3) Comparing suitability index against Mahalanobis distance The Mahalanobis distance and the suitability index calculated with the Mahalanobis model are slightly different. If applied to the raster cells, the patterns can turn out similar, they are however different. Input Data Catasticta_nimbice_maha3_cropped.tif Calculate the Mahalanobis distance and apply it to the cells. maha.fun &lt;- function(cell){ X &lt;- as.vector(cell, mode = &quot;numeric&quot;) sui.ind &lt;- mahalanobis(x= X, center= center, cov= boundary) return(sui.ind) } maha.map &lt;- calc(bios,fun=maha.fun) For easier comparison, the Mahalanobis distance and the Mahalanobis model rasters are plotted in ggplot. ext &lt;- extent(-120, -75, 0, 35) # Mahalanobis distance # calculate raster to points for ggplot mahamap.p &lt;- rasterToPoints(maha.map) mahamap.pd &lt;- data.frame(mahamap.p) colnames(mahamap.pd) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;, &quot;Maha&quot;) p1 &lt;- ggplot() + geom_tile(data = mahamap.pd,aes(x=Longitude, y=Latitude, fill=Maha)) + theme_bw() + coord_sf(xlim = c(ext[1], ext[2]), ylim = c(ext[3],ext[4]), expand = FALSE) + scale_fill_gradient2(&quot;Mahalanobis distance&quot;,limits=c(0,100), low = &#39;royalblue3&#39;, mid=&#39;seagreen3&#39;, high = &#39;gold2&#39;, na.value = NA, midpoint = 50, n.breaks=6) # Suitability index # calculate raster to points for ggplot mahasuit.p &lt;- rasterToPoints(cn.maha) mahasuit.pd &lt;- data.frame(mahasuit.p) colnames(mahasuit.pd) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;, &quot;Suitability&quot;) p2 &lt;- ggplot() + geom_tile(data = mahasuit.pd,aes(x=Longitude, y=Latitude, fill=Suitability)) + theme_bw() + coord_sf(xlim = c(ext[1], ext[2]), ylim = c(ext[3],ext[4]), expand = FALSE) + scale_fill_gradient2(&quot;Suitability index&quot;,limits=c(0, 1), low = &#39;royalblue3&#39;, mid=&#39;seagreen3&#39;, high = &#39;gold2&#39;, na.value = NA, midpoint = 0.5, n.breaks=6) # x11() ggarrange(p1, p2, ncol = 2, nrow = 1, widths = c(1.5,1.38), heights = c(1.5,1.38)) This example clearly shows that both methods are using the Mahalanobis distance but produce different results. On the left side, the Mahalanobis distance, the lower values show the area of importance (close to 0), while on the right hand side, the suitability index calculated with the Mahalanobis model shows important areas in higher values (close to 1) Figure 5.1: Figure of the differently calculated rasters. "],["plotting-an-ellipsoid-in-e-space.html", "6 Plotting an ellipsoid in E-space 6.1 Worked Examples", " 6 Plotting an ellipsoid in E-space The functions E.ellipse2d and E.ellipse3d create confidence regions that can function as suitable environment borders for a species. The ellipses are calculated with the Mahalanobis distance. Various alpha-levels can be chosen for the ellipses. The output is a plot with environmental datapoints of a species and as many ellipses as alpha levels have been chosen. There are two versions of this function: one for two environmental conditions and another one for three. E.ellipse with two dimensions. The function creates as many ellipses as alpha levels as are entered into the function. If no alpha levels are entered into the function, the default is 0.95. E.ellipse2d(Eoccs, mu, Sigma, alphas = 0.95, Enames) E.ellipse with three dimensions. With three environmental variables, the plot can be displayed in 3D. The parameters stay the same. E.ellipse3d(Eoccs, mu, Sigma, alpha = 0.95, Enames) 6.0.1 Parameters For both functions, five parameters are necessary: Eoccs = a matrix that contains two or three environmental variables that are correlated with the geographical occurrences of a species mu = the mean of the columns that contain environmental data Sigma = the covariance of the environmental data Enames = names for the environmental variables in form of a character vector alpha = the chosen alpha level(s) 6.0.2 Input and Output For this function a matrix that contains the corresponding environmental data of a species occurrence is necessary. The matrix can be created by using the get.Ecoord function (see tutorial Getting environmental values for the study sites). The output is a two- or three-dimensional plot with the environmental space of a species and one or more ellipses that signify the borders of the suitable environment of a species. For the three dimensional plot only one ellipse is created to ensure clarity of the plot. 6.0.3 Dependencies Example: rgl The package rgl and its functions are only for the display of three dimensional plots and have specific requirements that are not necessarily provided by an operating system. Here is a website that has instructions on how to run rgl in Windows 10. 6.1 Worked Examples 6.1.1 Read source code and library source(&quot;.\\\\Functions\\\\Eellipse.R&quot;) library(rgl) 6.1.2 Example with three ellipses (Threnetes ruckeri) Input Data Threnetes_ruckeri_occ_GE.csv Load a matrix with environmental data that is linked to the occurrence of a species (omit the geographic coordinates). # read table of occurrences, omit coordinates thr.occE &lt;- read.csv (&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T)[,-(1:2)] Calculate the means of the columns with environmental data. mu1 &lt;- colMeans(thr.occE) Calculate the covariance of the environmental data. Sigma1 &lt;- cov(thr.occE) Set the names of the environmental types for the x and y axis of the plot. names1 &lt;- c(&quot;Annual mean temperature (°C x 10)&quot;,&quot;Annual Precipitation (mm)&quot;) Define the confidence levels, here 75%, 90%, and 95%. Setting three alpha levels will create three ellipses for the confidence region. alpha1 &lt;- c(0.75, 0.9, 0.95) Apply E.ellipse. E.ellipse2d(Eoccs = thr.occE, mu = mu1, Sigma = Sigma1, alphas = alpha1, Enames = names1) Figure 6.1: Figure of the environmental space of Threnetes ruckeri bordered by three ellipses. 6.1.3 Example with several ellipses (Catasticta nimbice) Input Data Catasticta_nimbice_occ_GE.csv Read the matrix with environmental values and define labels for the plot. # read table of occurrences, omit coordinates cn.occE2 &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T)[,-(1:2)] # set the names for both environmental conditions that will become labels for the plot names2 &lt;- c(&quot;Annual mean temperature (°C x 10)&quot;,&quot;Annual Precipitation (mm)&quot;) The confidence level is defined by a sequence from zero to one with an increment of 0.1. This will create several ellipses. alpha2 &lt;- seq(0,1,by = 0.1) E.ellipse2d(Eoccs = cn.occE2, mu = mu1, Sigma = Sigma1, alpha = alpha2, Enames = names2) Figure 2.4: Figure of the environmental space of Threnetes ruckeri bordered by three ellipses. 6.1.4 Example with three environmental variables (Catasticta nimbice) Input Data Catasticta_nimbice_occ_GE3.csv Read the occurrence table with three environmental conditions. cn.occE3 &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE3.csv&quot;,header=T)[,-(1:2)] Calculate muand Sigma with the occurrence table and set the names for the xyz axis. mu3D &lt;- colMeans(cn.occE3) Sigma3D &lt;- cov(cn.occE3) names3D &lt;- c(&quot;Bio1&quot;,&quot;Bio6&quot;, &quot;Bio12&quot;) Apply the function and create a 3D plot. # call the 3D plot open3d() # apply the function E.ellipse3d(Eoccs = cn.occE3, mu = mu3D, Sigma = Sigma3D, alpha = 0.99, Enames = names3D) Figure 6.2: Figure of the three dimensional environmental space of Catasticta nimbice bordered by an ellipse shaped sphere. "],["how-to-simulate-a-random-sample-of-environmental-conditions-inside-an-region.html", "7 How to simulate a random sample of environmental conditions inside an region 7.1 Worked Examples", " 7 How to simulate a random sample of environmental conditions inside an region The function rs.inE takes a random sample of environmental combinations inside the study area. For this, the environmental data from a rasterstack is clipped by a shapefile that delimits the area before the sample is taken. rs.inE(region, N, Estck) 7.0.1 Parameters region = a shapefile of the study area (polygon) N = the sample size Estck = a rasterstack that contains at least two layers with environmental data 7.0.2 Input and Output As input, rasters with environmental information and a shapefile that defines the region of interest are needed. The output of the function is a matrix of random points with as many columns as layers the rasterstack has. 7.0.3 Dependencies Parameters: raster, rgdal Example plot: scales 7.1 Worked Examples 7.1.1 Read source code and libraries source(&quot;.\\\\Functions\\\\random_sampling_inE.R&quot;) library(raster) library(rgdal) library(scales) 7.1.2 Catasticta nimbice Input Data bio1.asc bio12.asc Catasticta_nimbice.shp (and associated files) First, the rasterstack for the parameter Estck is prepared. For this example two rasters with the environmental data annual mean temperature and total annual precipitation are used. The rasterstack will therefore have two layers. # Read environmental layers bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) bio12 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) # Create a single raster with as many layers as environmental variables stck_bios &lt;- stack(bio1, bio12) Read the parameter for region. cn.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Catasticta_nimbice&quot;) Apply the function with Estck, region, and N. Here, N will be 10,000. The generated matrix will therefore have two columns with environmental data from the study area and 10,000 rows. sam.pnts &lt;- rs.inE(region = cn.shp, N = 10000, Estck = stck_bios) If needed, save the output as a csv-file. write.csv(sam.pnts,file=paste0(&quot;./Generated_Data/Catasticta_nimbice&quot;,&quot;_M_E.csv&quot;), row.names = F) Create a simple plot of the environmental space (E-Space) with a species occurrence. # read occurrence data occ &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T) # set colors pal &lt;- c(&quot;grey50&quot;, &quot;turquoise&quot;) # plot # x11() # use random points with environmental data for the plot plot(sam.pnts[,1], sam.pnts[,2], pch=&quot;.&quot;, col=pal[1], xlab=&quot;Mean Annual Temperature (°C*10)&quot;, ylab=&quot;Annual precipitation (mm)&quot;, main=&quot;Environmental Space&quot;) # add points of species environmental data points(occ$bio1, occ$bio12, pch=19, col=pal[2]) # add legend legend(x= &quot;topleft&quot;, legend = c(&quot;Study Area&quot;, &quot;Occurences&quot;), pch = c(20, 19), col = c(pal[1], pal[2]), bty = &quot;n&quot;) Figure 7.1: Figure of the environmental space, where the occurrence points of Catasticta nimbice are plotted over a bunch of background points that were sampled from the rasterstack and polygon. 7.1.3 Threnetes ruckeri Input Data bio1.asc bio12.asc Threnetes_ruckeri.shp (and associated files) In this example, a different graph will be plotted using the sampled points. Read the shapefile. The rasterstack was already prepared in the previous example and it is not necessary to redo the process. # Read M polygon thr.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Threnetes_ruckeri&quot;) Apply the function with region, Estck, and a sample size with N. ## Get a random sample of points in M and extract its corresponding environmental values sam.pnts2 &lt;- rs.inE(region = thr.shp,N = 10000,Estck = stck_bios) The output is used to plot a graph showing concentrations of sample points marked by a shade. The layers of shades are created by kernel smoothing. The kernel is drawn using the points inside M. There are currently five levels of shades selected (5, 25, 50, 75, and 95). # Calculate and draw the kernel using the points inside M (define M carefully) # kernel for contour plot fhat.M &lt;- ks::kde(x=cbind(sam.pnts2[,1], sam.pnts2[,2])) ## Probability of selecting a point, given the fundamental niche # plot estimated kernel of M with points inside M lvls1 &lt;- c(5,25,50,75,95) # library(scales) col.M2 &lt;- alpha(&quot;orangered2&quot;,0.1) M.cols &lt;- colorRampPalette(c(alpha(&quot;white&quot;,0.1),alpha(&quot;cadetblue4&quot;,0.9))) # plot # x11() plot(fhat.M,display=&quot;filled.contour&quot;,cont=lvls1,main=&quot;&quot;,xlab=&quot;Mean annual temperature (°C*10)&quot;, ylab=&quot;Annual precipitation (mm)&quot;,col=M.cols(length(lvls1)+1)) # add points used for kernel estimation points(sam.pnts2[,1], sam.pnts2[,2],col=col.M2,pch=20,cex=0.6) Figure 2.3: Figure of the environmental space showing layers with various density of the sampled points from the rasterstack and polygon. "],["how-to-identify-points-inside-and-outside-the-fundamental-niche.html", "8 How to identify points inside and outside the fundamental niche 8.1 Worked Examples", " 8 How to identify points inside and outside the fundamental niche The function in.el creates a matrix that determines how many points are within a confidence region bordered by an ellipse. The ellipse is calculated based on a species environmental data and a confidence level. The calculation is based on the Mahalanobis distance. The points inside the ellipse are potential data points of the niche in which a species may thrive. The function can be used for two and three dimensional plots. in.el(cloud, centroid, sigma, alpha) 8.0.1 Parameters cloud = a matrix with random points that contain environmental data centroid = mean of the columns of a matrix that contains environmental data linked with a species occurrence sigma = the covariance of environmental data linked with a species occurrence that defines the ellipse alpha = the confidence level to be used 8.0.2 Input and Output For this function two matrices are necessary: one that uses random points to create a cloud of background points with environmental data and another one that contains the occurrence points of a species in correspondence with environmental data. Both matrices can be created by using the get.ecoord function (see tutorial Getting environmental values for the study sites). The matrix with background points can also be sampled with the function rs.inE (see tutorial Random sampling in environmental data). The output is a matrix that contains data on which points lie within an ellipse. This matrix can be visualized with a plot. 8.0.3 Dependencies Examples: rgl 8.1 Worked Examples 8.1.1 Read source code and library source(&quot;.\\\\Functions\\\\inside_ellipse.R&quot;) library(rgl) 8.1.2 Threnetes ruckeri Input Files Threnetes_ruckeri_M_GE.csv Threnetes_ruckeri_occ_GE.csv Read table with random sampled points that contains correlated environmental information. # omit coordinates cloud1 &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_M_GE.csv&quot;,header=T)[,-(1:2)] Read table with a species occurrence that contains correlated environmental information. # omit coordinates thr.occE &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T)[,-(1:2)] The centroid is calculated by taking the means of the two columns in the matrix. mu1 &lt;- colMeans(thr.occE) Sigma is calculated with covariance of the environmental data of the occurrence points. Sigma1 &lt;- cov(thr.occE) Apply in.el with the parameters cloud, centroid, sigma, and alpha. The value for alpha can be set directly in the function. The Mahalanobis distance is calculated with environmental conditions that were linked to presence points of a species. The points within an ellipse reflect theoretical environmental conditions in which a species may thrive. This ellipse can serve as a border for suitable environments. Plot the matrix of clouds with an ellipse. # Use the function to determine which points from the matrix are inside the ellipse check &lt;- in.el(cloud = cloud1, mu = mu1, sigma = Sigma1, 0.95) # plot # x11() plot(check[,2],check[,3],pch=20,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;Points inside an ellipse&quot;) el &lt;- ellipse::ellipse(x=Sigma1, centre = mu1, level=0.95) lines(el,col=2,lwd=2) points(subset(check,check[,1]==1)[,2:3],pch=19,col=2) Figure 2.2: Figure of Threnetes ruckeri occurrences in the environmental space delineated by an ellipse. 8.1.3 Catasticta nimbice 8.1.3.1 2D Version Input Files Catasticta_nimbice_occ_GE.csv Catasticta_nimbice_M_GE.csv Prepare the parameters centroid, sigma, and cloud and plot. cn.occE &lt;- read.csv (&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T)[,-(1:2)] mu2 &lt;- colMeans(cn.occE) Sigma2 &lt;- cov(cn.occE) cloud2 &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_M_GE.csv&quot;,header=T)[,-(1:2)] check2 &lt;- in.el(cloud2, mu2, Sigma2, 0.95) # x11() plot(check2[,2], check2[,3], pch=&quot;.&quot;, xlab=&quot;&quot;, ylab=&quot;&quot;, main=&quot;Points inside an ellipse&quot;) el &lt;- ellipse::ellipse(x=Sigma2, centre = mu2, level=0.95) lines(el, col=2, lwd=2) points(subset(check2, check2[,1]==1)[,2:3], pch=20, col=2) Figure 4.2: Figure of Catasticta nimbice occurrences in the environmental space delineated by an ellipse. 8.1.3.2 3D version Input data: Catasticta_nimbice_occ_GE3.csv Catasticta_nimbice_M_GE3.csv Prepare the parameters centroid, sigma, and cloud. # read occurrence points with three environmental variables cn.occE3 &lt;- read.csv (&quot;./Generated_Data/Catasticta_nimbice_occ_GE3.csv&quot;,header=T)[,-(1:2)] mu3 &lt;- colMeans(cn.occE3) Sigma3 &lt;- cov(cn.occE3) # Define the matrix of points with matrix of random points that have three # environmental layers cloud3 &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_M_GE3.csv&quot;,header=T)[,-(1:2)] Apply the function: check3 &lt;- in.el(cloud = cloud3, centroid = mu3, sigma = Sigma3, alpha = 0.95) Plot in 3D using the package rgl: # create the three dimensional ellipse elli &lt;- ellipse3d(centre = mu3, x= Sigma3, level = 0.95) open3d() plot3d(subset(check3,check3[,1]==1)[,2:4], box = FALSE, xlab=&quot;bio1&quot;, ylab=&quot;bio6&quot;, zlab=&quot;bio12&quot;, type = &quot;s&quot;, size= 0.6, col=&quot;orange&quot;) points3d(subset(check3,check3[,1]==0)[,2:4], size= 4, col= &quot;grey&quot;) spheres3d(x=mu3[1], y=mu3[2], z=mu3[3], radius=25, col=&quot;darkblue&quot;) plot3d(elli, col = &quot;darkorange4&quot;, alpha = 0.5, add = TRUE, type = &quot;wire&quot;) Figure 8.1: Figure of Catasticta nimbice occurrences in the environmental space delineated by an ellipse with three dimensions. 8.1.4 Theoretical Example In this example, the data points for the cloud and the centroid are constructed and no input files are needed. Prepare the parameters. mu &lt;- c(0.86,1) sigma &lt;- matrix(c(0.021, -0.008, -0.008, 0.061), ncol=2, byrow=T) # Define the matrix of points cloud &lt;- cbind(runif(5000, 0, 2), runif(5000, 0, 2)) Apply the function and plot the results. # Use the function to determine which points from the matrix are inside the ellipse check &lt;- in.el(cloud, mu, sigma, 0.95) # Plot the points, ellipse and use different colors for the points inside/outside the ellipse # x11() plot(check[,2],check[,3],pch=&quot;.&quot;,xlab=&quot;&quot;,ylab=&quot;&quot;,main=&quot;Points inside an ellipse&quot;) el &lt;- ellipse::ellipse(x=sigma,centre = mu,level=0.95) lines(el,col=2,lwd=2) points(subset(check,check[,1]==1)[,2:3],pch=19,col=2) Figure 6.2: Figure of a cloud with random points and specific points that are within an ellipse "],["weighted-normal-model-accounting-for-the-uneven-availability-of-environmental-conditions.html", "9 Weighted-normal model: accounting for the uneven availability of environmental conditions 9.1 How the functions work 9.2 Worked examples", " 9 Weighted-normal model: accounting for the uneven availability of environmental conditions The estimation of the fundamental niche can be approached with the maximum likelihood estimation. It uses a weighted distribution where the weights represent the availability of environmental combinations inside M. To calculate the maximum likelihood estimation, three functions are necessary: rs.inE, negloglike, and fitNiche. 9.1 How the functions work The main function of this tutorial is fitNiche. It estimates the fundamental niche of a species with a weighted normal distribution. fitNiche(E.occ, E.samM) The fitNiche function makes use of another function, called negloglike, that calculates negative log-likelihood values. negloglike(guess, sam1, sam2) 9.1.1 Parameters Only two parameters are needed, as the parameters for negloglike will be derived from those as well. E.occ = a matrix with occurrence and corresponding environmental data of a species E.samM = a matrix containing a random sample of environmental combinations which come from the area of study (M) 9.1.2 Input and Output In order to use fitNiche, a matrix of randomly sampled points within the study area (= result from the function rs.inE) and the occurrence data of a species that contains environmental data are needed. The output is a list with four different objects: mu and sigma for the weigthed normal distribution, and mu and sigma for the distribution using Mahalanobis distance. These parameter estimates can be used to calculate and plot ellipses in the environmental space. They can also be used for raster calculations (see following tutorials). 9.1.3 Dependencies Functions: rgeos Examples: raster, rgdal, ggplot2 9.2 Worked examples 9.2.1 Read sources and libraries source(&quot;.\\\\Functions\\\\random_sampling_inE.R&quot;) source(&quot;.\\\\Functions\\\\fit_wn_maha_model.R&quot;) library(raster) library(rgdal) library(rgeos) library(ggplot2) 9.2.2 Catasticta nimbice Input Files Catasticta_nimbice_occ_GE.csv Catasticta_nimbice.shp (and associated files) bio1.asc bio12.asc Read the files necessary for the parameters of rs.inE and fitNiche. cn.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Catasticta_nimbice&quot;) bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) bio12 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) cn.occ &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T)[,-(1:2)] For the parameter E.samM the output of the function rs.inE is necessary. Prepare parameters for rs.inE: create rasterstack. bios &lt;- stack(bio1, bio12) Apply the function rs.inE to get a set of sampled points with environmental information. cn.sample &lt;- rs.inE(region = cn.shp,N = 10000,Estck = bios) Apply the function with the parameters E.occ and E.samM to receive estimated parameters. ml &lt;- fitNiche(E.occ = cn.occ, E.samM = cn.sample) Create a new table with the output data and rename the columns. ml.table &lt;- cbind(ml$wn.mu, ml$wn.sigma, ml$maha.mu, ml$maha.sigma) colnames(ml.table) &lt;- c(&quot;wn.mu&quot;, &quot;wn.sigma1&quot;, &quot;wn.sigma2&quot;, &quot;maha.mu&quot;, &quot;maha.sigma1&quot;, &quot;maha.sigma2&quot;) Save the table as a csv-file. write.csv(ml.table,&quot;./Generated_Data/cn_mu_sigma_estimates.csv&quot;,row.names = F) Calculate the ellipses for the weighted distribution normal and the multivariate normal distribution. # get the ellipse defined by the ml estimators el.wn &lt;- ellipse::ellipse(x=ml[[2]], centre=ml[[1]], level=0.99) # get the ellipse from a multivarite normal model / mahalanobis distance method el.maha &lt;- ellipse::ellipse(x=ml[[4]], centre=ml[[3]], level=0.99) Plot the environmental space with the sampled points, the occurrence points, the ellipse for the weigthed distribution and the ellipse from the Mahalanobis method. The plot will be saved as a png. # set colorpalette colpal &lt;- c(&quot;grey70&quot;, &quot;chartreuse4&quot;, &quot;coral2&quot;, &quot;cadetblue3&quot;) # plot will be saved as .png png(paste0(&quot;./Generated_Data/Catasticta_nimbice&quot;,&quot;_mle.png&quot;),width = 2300, height = 2300, res = 600, pointsize = 6) # x11() plot(cn.sample,col=colpal[1],pch=1, xlab=&quot;Annual mean temperature (°C*10)&quot;, ylab=&quot;Annual precipitation (mm)&quot;) # add presence points to the plot points(cn.occ,col=colpal[3],pch=20,cex=1.5) # presences used in model # ellipse maha lines(el.maha,col=colpal[4],lwd=2) # ellipse wn lines(el.wn,col=colpal[2],lwd=2) sp.leg &lt;- paste(&quot;Catasticta nimbice&quot;,&quot;(&quot;,nrow(cn.occ),&quot;)&quot;) legend(&quot;topleft&quot;,legend = c(sp.leg,&quot;Points inside M&quot;,&quot;Presences&quot;, &quot;Ellipse from Mahalanobis method&quot;, &quot;Ellipse from weighted-normal model&quot;), pch=c(NA,1,19,NA,NA),col = c(&quot;white&quot;, colpal[1], colpal[3], colpal[4], colpal[2]), lwd=c(NA,NA,NA,2,2),bty = &quot;n&quot;) # finish saving png dev.off() Figure 2.3: Figure of the environmental space of Catasticta nimbice. It shows the occurrence points of a species with two possible niches delineated by the Mahalanobis method and the weighted normal method. Output Files cn_mu_sigma_estimates.csv Catasticta_nimbice_mle.png 9.2.3 Threnetes ruckeri Input Files Threnetes_ruckeri_occ_GE.csv Threnetes_ruckeri.shp (and associated files) bio1.asc bio12.asc For this species the same steps are followed as above until the plot. Here, it will be plotted using ggplot2. Read the matrix with occurrences combined with environmental data and the shape-file of the study area (the necessary rasterstack was already created in the example above). thr.occ &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T)[,-(1:2)] thr.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Threnetes_ruckeri&quot;) Sample random points from the area of interest using the rs.inE function with the parameters region, N, and Estck. thr.sample &lt;- rs.inE(region = thr.shp, N = 5000, Estck = bios) Apply function fit.Niche and change table. ml2 &lt;- fitNiche(E.occ = thr.occ, E.samM = thr.sample) # change function into proper table and rename column names ml.table2 &lt;- cbind(ml$wn.mu, ml$wn.sigma, ml$maha.mu, ml$maha.sigma) colnames(ml.table2) &lt;- c(&quot;wn.mu&quot;, &quot;wn.sigma1&quot;, &quot;wn.sigma2&quot;, &quot;maha.mu&quot;, &quot;maha.sigma1&quot;, &quot;maha.sigma2&quot;) Write results as a table. write.csv(ml.table2,&quot;./Generated_Data/tr_mu_sigma_estimates.csv&quot;,row.names = F) Calculate ellipses and change them into a dataframe. # get the ellipse defined by the ml estimators el.wn2 &lt;- ellipse::ellipse(x=ml2[[2]], centre=ml2[[1]], level=0.99, npoints = 500) df.el2 &lt;- as.data.frame(el.wn2) colnames(df.el2) &lt;- c(&quot;Temperature&quot;, &quot;Precipitation&quot;) # get the ellipse from a multivarite normal model / mahalanobis distance method el.maha2 &lt;- ellipse::ellipse(x=ml2[[4]], centre=ml2[[3]], level=0.99) df.elmh2 &lt;- as.data.frame(el.maha2) colnames(df.elmh2) &lt;- c(&quot;Temperature&quot;, &quot;Precipitation&quot;) Plot in ggplot. # prepare data as a dataframe for ggplot bckgrnd &lt;- data.frame(Temperature = thr.sample[,1], Precipitation = thr.sample[,2]) species &lt;- data.frame(Temperature = thr.occ[,1], Precipitation = thr.occ[,2]) data &lt;- cbind(rbind(bckgrnd[,1:2], species[,1:2]), c(rep(1,nrow(bckgrnd)),rep(2,nrow(species)))) data2 &lt;- data.frame(Temperature = data[, 1], Precipitation = data[, 2], Type = data[,3]) # plot the ellipses in E-Space # x11() ggplot(data2, aes(x = Temperature, y = Precipitation)) + geom_point(aes(color = factor(Type), shape = factor(Type))) + scale_shape_manual(values=c(1, 19), guide = FALSE) + scale_color_manual(name= &quot;Data&quot;, labels= c(&quot;Background&quot;, &quot;Presence&quot;), values= c(&quot;1&quot;=colpal[1], &quot;2&quot;= colpal[3])) + theme(legend.position = c(.05, .95), # for x, value of 0 puts it to the # left side, value of 1 to the right, for y, value of 0 puts it to # the bottom, # value of 1 puts it to the top legend.justification = c(&quot;left&quot;, &quot;top&quot;)) + scale_x_continuous(&quot;Annual mean temperature (°C*10)&quot;) + scale_y_continuous(&quot;Annual precipitation (mm)&quot;) + geom_path(data = df.el2, color = colpal[2], size = 1.2) + geom_path(data = df.elmh2, color = colpal[4], size = 1.2) Figure 9.1: Figure of the environmental space of Threnetes ruckeri. It shows the occurrence points of a species with two possible niches delineated by the Mahalanobis method (blue) and the weighted normal method (green). Save the plot if needed. ggsave(&quot;./Generated_Data/Threnetes_ruckeri_mle.png&quot;, width = 12, height = 12, units = &quot;cm&quot;, dpi = 600, pointsize = 6) Output Files tr_mu_sigma_estimates.csv Threnetes_ruckeri_mle.png "],["projecting-an-estimated-niche-into-g-space.html", "10 Projecting an estimated niche into G-space 10.1 Worked Examples", " 10 Projecting an estimated niche into G-space The function niche.G projects ellipses that define suitable environments for a species on a raster map. Those potential niches in the geographical space are colored by different degrees of suitability. The calculation is based on the Mahalanobis distance (for further explanation, see tutorial Mahalanobis model). niche.G(Estck, mu, Sigma) 10.0.1 Parameters Estck = a raster stack with more than two climatic layers mu = the mean of the columns that contain environmental data, such as temperature and precipitation Sigma = the covariance of the environmental data linked with a species occurrence 10.0.2 Input and Output The function needs raster files with environmental layers and a matrix with occurrence data of a species that correlates with environmental variables. The latter can be created by using the get.Ecoord function (see tutorial Getting environmental values for the study sites). This matrix can be replaced by a matrix that contains already calculated values using the Mahalanobis distance and weigthed normal distribution. This matrix can be created by using the function fitNiche (see tutorial Weighted-normal model). In case the result is to be plotted in ggplot, other files might be necessary, such as a shapefile that describes the study area or cropped rasters. The function will produce a raster of areas that have suitable environmental conditions for a species. Those potential ecological niche regions are colored by different degrees of suitability. The output can be plotted and saved as TIF or ASCI file. Be aware that some older GIS program versions might have an issue with properly displaying the tif-file. 10.0.3 Dependencies Function: raster Examples: sp, mvtnorm (only needs to be installed),ggplot2, ggpubr, rgdal 10.1 Worked Examples 10.1.1 Read source code and libraries source(&quot;.\\\\Functions\\\\nicheG.R&quot;) library(sp) library(ggplot2) library(ggpubr) library(rgdal) 10.1.2 Catasticta nimbice Input Files bio1.asc bio12.asc Catasticta_nimbice_occ_GE.csv Catasticta_nimbice.shp (and associated files) Read the rasters with environmental data and combine them into a rasterstack with two (or more layers). ## Read raster bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) bio12 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) # combine the rasters into a RasterStack bios &lt;- stack(bio1,bio12) For the species occurrence points in correspondence with environmental data the occ_GE.csv-file that was created with get.Ecoord is used. # read table and omit columns with coordinates occ_E &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T)[,-(1:2)] 10.1.2.1 Apply the function and automatically plot with basic plot Apply the function niche.G with the parameters Estck, mu, and Sigma. The results are plotted in the basic plot function. cn.result &lt;- niche.G(Estck = bios, mu = colMeans(occ_E), Sigma = cov(occ_E)) Save the raster output as TIF or ASCI file. writeRaster(cn.result,&quot;./Generated_Data/Catasticta_nimbice_maha_map.tif&quot;, overwrite = T) # writeRaster(cn.result, &quot;./Generated_Data/Catasticta_nimbice_maha_map.asc&quot;, overwrite = T) Figure 4.1: Figure of the geographical space with suitable niches for Catasticta nimbice . 10.1.2.2 Apply the function and plot with ggplot Another way to use the function niche.G is to use estimated values of mu and Sigma directly. The rasters with environmental data are cropped to the region of interest with a polygon before being stacked together in this version. They can also be cropped with coordinates (see the example for Threnetes ruckeri below). # read polygon of the study area cn.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Catasticta_nimbice&quot;) # crop and mask the rasters with environmental layers bio1c &lt;- mask(crop(bio1, cn.shp), cn.shp) bio12c &lt;- mask(crop(bio12, cn.shp), cn.shp) biosc &lt;- stack(bio1c, bio12c) For this application, the values for muand Sigma from the weighted normal distribution model are used directly. cn.wn &lt;- niche.G(Estck = biosc, mu = c(166.1297518,1265.130825), Sigma = matrix(c(1427.054608, 7687.724366, 7687.724366, 332940.0973),ncol=2)) Write the raster of the model as file (additionally, the cropped environmental layers can be saved as well for later use). writeRaster(cn.wn,&quot;./Generated_Data/Catasticta_nimbice_wn_map.tif&quot;, overwrite = T) # writeRaster(cn.wn, &quot;./Generated_Data/Catasticta_nimbice_wn_map.asc&quot;, overwrite = T) Plot the results in a ggplot. # calculate raster to points for ggplot cn.wnp &lt;- rasterToPoints(cn.wn) cn.wnpd &lt;- data.frame(cn.wnp) colnames(cn.wnpd) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;,&quot;Suitability&quot;) # read species occurrence points occ_GE &lt;- read.csv(&quot;./Generated_Data/Catasticta_nimbice_occ_GE.csv&quot;,header=T) # x11() ggplot() + geom_tile(data = cn.wnpd,aes(x=Longitude, y=Latitude, fill=Suitability)) + theme_bw() + #borders(&quot;world&quot;, xlim = c(-179, 179), ylim = c(-60, 80)) + scale_fill_gradient2(&quot;Suitability&quot;,limits=c(0,1), low = &#39;grey80&#39;, mid=&#39;slateblue1&#39;, high = &#39;slateblue4&#39;,na.value = NA, midpoint = 0.5, n.breaks=4) + # coord_sf(xlim = emap[1:2], ylim = emap[3:4], expand = FALSE) + geom_point(data = occ_GE,aes(x=occ_GE[,1], y=occ_GE[,2]), shape = 21, fill = &quot;orange1&quot;, alpha = 0.7) + labs(title = &quot;Catasticta nimbice occurrences in Middle America&quot;) + labs(subtitle = &quot;and suitable niches based on the weighted normal distribution&quot;) + theme(plot.title = element_text(hjust = 0.5), plot.subtitle = element_text(hjust = 0.5)) Save the ggplot as PNG. ggsave(&#39;./Generated_Data/Catasticta_nimbice_wn_map_ggplot.png&#39;, width = 24, height = 24, units = &quot;cm&quot;, dpi = 600, pointsize = 6) Figure 10.1: Figure of the geographical space with suitable niches for Catasticta nimbice and presence points . Output files Catasticta_nimbice_maha_map.tif Catasticta_nimbice_maha_map.asc cn_maha_cropped.tif Catasticta_nimbice_wn_map.tif Catasticta_nimbice_wn_map.asc tr_wn_cropped.tif Catasticta_nimbice_wn_map_ggplot.png 10.1.3 Threnetes ruckeri Input Files bio1.asc bio12.asc tr_mu_sigma_estimates.csv Threnetes_ruckeri_occ_GE.csv This example uses the Mahalanobis distance and the weighted normal distribution. The graphs are plotted in ggplot2. The raster files used here are the same as the ones used for the Catasticta nimbice examples. ## Read raster files # bio1 &lt;- raster(&quot;./Initial_Data/bio1.asc&quot;) # bio2 &lt;- raster(&quot;./Initial_Data/bio12.asc&quot;) bios &lt;- stack(bio1,bio2) Load the matrix results of the weighted normal distribution that was calculated with the functions rs.inE, negloglike, and fitNiche. thr.fitN &lt;- read.csv(&quot;./Generated_Data/tr_mu_sigma_estimates.csv&quot;,header=T)[,-1] Apply the function with Estck, mu, and Sigma for each, the weighted normal distribution and the Mahalanobis distance model. # weighted normal distribution Thr.wn &lt;- niche.G(Estck = bios, mu = thr.fitN$wn.mu, Sigma = cbind(thr.fitN$wn.sigma1, thr.fitN$wn.sigma2)) # Mahalanobis distance Thr.maha &lt;- niche.G(Estck = bios, mu = thr.fitN$maha.mu, Sigma = cbind(thr.fitN$maha.sigma1, thr.fitN$maha.sigma2)) Save the output as TIF or ASCI file. # weigthed normal distribution writeRaster(Thr.wn,&quot;./Generated_Data/Threnetes_ruckeri_wn_map.tif&quot;, overwrite = T) # writeRaster(Thr.wn, &quot;./Generated_Data/Threnetes_ruckeri_wn_map.asc&quot;, overwrite = T) # Mahalanobis distance writeRaster(Thr.maha,&quot;./Generated_Data/Threnetes_ruckeri_maha_map.tif&quot;, overwrite = T) # writeRaster(Thr.maha, &quot;./Generated_Data/Threnetes_ruckeri_maha_map.asc&quot;, overwrite = T) Plot both models next to each other in a ggplot Load the previously created tif-file with the suitability levels for the Mahalanobis distance model and the weighted normal distribution model or directly apply the results. maha.map &lt;- raster(&quot;./Generated_Data/Threnetes_ruckeri_maha_map.tif&quot;) wn.map &lt;- raster(&quot;./Generated_Data/Threnetes_ruckeri_wn_map.tif&quot;) Convert the raster to points and create a data-frame for ggplot. Name the columns of the new data-frame. # for Mahalanobis model maha.mappt &lt;- rasterToPoints(maha.map) outp.maha &lt;- data.frame(maha.mappt) colnames(outp.maha) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;,&quot;Suitability&quot;) # for weighted normal model wn.mappt &lt;- rasterToPoints(wn.map) outp.wn &lt;- data.frame(wn.mappt) colnames(outp.wn) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;,&quot;Suitability&quot;) Plot in ggplot. p1 &lt;- ggplot() + geom_tile(data = outp.maha,aes(x=Longitude, y=Latitude, fill=Suitability)) + theme_bw() + scale_fill_gradient2(&quot;Suitability&quot;,limits=c(0,1), low = &#39;grey80&#39;, mid=&#39;slateblue1&#39;, high = &#39;slateblue4&#39;,na.value = NA, midpoint = 0.5, n.breaks=4) + labs (title = &quot;Mahalanobis distance model&quot;) + theme(plot.title = element_text(hjust = 0.5)) p2 &lt;- ggplot() + geom_tile(data = outp.wn,aes(x=Longitude, y=Latitude, fill=Suitability)) + theme_bw() + scale_fill_gradient2(&quot;Suitability&quot;,limits=c(0,1), low = &#39;grey80&#39;, mid=&#39;slateblue1&#39;, high = &#39;slateblue4&#39;,na.value = NA, midpoint = 0.5, n.breaks=4) + labs (title = &quot;Weighted normal distribution model&quot;) + theme(plot.title = element_text(hjust = 0.5)) # x11() ggarrange(p1, p2, ncol = 2, nrow = 1) Figure 10.2: Figure of the geographical space with suitable niches for Threnetes ruckeri using the Mahalanobis distance model and the weigthed normal distribution model in ggplot2. Plot a raster that has been cropped by coordinates in ggplot. This crop serves as a zoom to the region of interest. # read occurrence data of species species &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T) # define coordinates that describe the study area and crop model raster with it emap &lt;- extent(-100, -68, -8, 22) area.maha &lt;- crop(maha.map, emap) area.wn &lt;- crop(wn.map, emap) # create points from the raster and give column names maha.mappt &lt;- rasterToPoints(area.maha) outp.maha &lt;- data.frame(maha.mappt) colnames(outp.maha) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;,&quot;Suitability&quot;) wn.mappt &lt;- rasterToPoints(area.wn) outp.wn &lt;- data.frame(wn.mappt) colnames(outp.wn) &lt;- c(&quot;Longitude&quot;,&quot;Latitude&quot;,&quot;Suitability&quot;) # plot both maps into one graph p1 &lt;- ggplot() + geom_tile(data = outp.maha,aes(x=Longitude, y=Latitude, fill=Suitability)) + theme_bw() + scale_fill_gradient2(&quot;Suitability&quot;,limits=c(0,1), low = &#39;grey80&#39;, mid=&#39;slateblue1&#39;, high = &#39;slateblue4&#39;,na.value = NA, midpoint = 0.5, n.breaks=4) + geom_point(data = species,aes(x=species[,1], y=species[,2]), shape = 21, fill = &quot;orange1&quot;, alpha = 0.7) + labs (title = &quot;Mahalanobis distance model&quot;) + theme(plot.title = element_text(hjust = 0.5)) p2 &lt;- ggplot() + geom_tile(data = outp.wn,aes(x=Longitude, y=Latitude, fill=Suitability)) + theme_bw() + scale_fill_gradient2(&quot;Suitability&quot;,limits=c(0,1), low = &#39;grey80&#39;, mid=&#39;slateblue1&#39;, high = &#39;slateblue4&#39;,na.value = NA, midpoint = 0.5, n.breaks=4) + geom_point(data = species,aes(x=species[,1], y=species[,2]), shape = 21, fill = &quot;orange1&quot;, alpha = 0.7) + labs (title = &quot;Weighted normal distribution model&quot;) + theme(plot.title = element_text(hjust = 0.5)) # x11() ggarrange(p1, p2, ncol = 2, nrow = 1) Figure 10.3: Figure of the geographical space with suitable niches for Threnetes ruckeri using the Mahalanobis distance model and the weigthed normal distribution model in ggplot2. Save the plot as a PNG. ggsave(&#39;./Generated_Data/Threnetes_ruckeri_nicheG_ggplot.png&#39;, width = 48, height = 24, units = &quot;cm&quot;, dpi = 600, pointsize = 6) Output Files Threnetes_ruckeri_wn_map.tif Threnetes_ruckeri_wn_map.asc tr_wn_cropped.tif Threnetes_ruckeri_maha_map.tif Threnetes_ruckeri_maha_map.asc tr_bay_cropped.tif Threnetes_ruckeri_nicheG_ggplot.png "],["evaluation-method-building-accumulation-curve-of-occurrences.html", "11 Evaluation method: building accumulation curve of occurrences 11.1 Calculate the accumulation curve 11.2 Worked Examples 11.3 Comparing the accumulation curves", " 11 Evaluation method: building accumulation curve of occurrences In this tutorial, three functions are used to generate an accumulation curve and plot it. Those functions are get.table, get.curve, and plot.aco. The function accum.occ will make use of the same function to produce several graphs as well as a matrix output of the curve. The resulting curves can then be tested with the function compare.aco. 11.1 Calculate the accumulation curve In order to calculate the accumulation curve, three different sub-functions are needed for the main function accum.occ. First, get.table will extract data from a raster that has information on suitable niches for a species and create a table with the extracted information. get.table(G.occ, suit.Estck) The second function get.curve classifies and accumulates cells for the study area and occurrences of a species based on the suitability that was previously calculated by using a specific model, such as Mahalanobis distance. The accumulated cells are then counted for the intervals of a curve. get.curve(occ.suit, mod.suit) The third function that serves as a subfunction is plot.aco. It plots the accumulation curve of occurrences given a confidence level and the output of the function get.curve. plot.aco(species, aco.curve, conlev, model) With the output of these functions, the main function accum.occ will generate a table and/or graphs. accum.occ(names, G.occ, suit.Estck, null.mod, clev=0, flag=T) 11.1.1 Parameters G.occ = a matrix with the coordinates of a species occurrence suit.Estck = a rasterstack of a raster with a calculated suitability index and two or more rasters with environmental variables names = a vector with a species name, followed by names for the environmental variables null.mod = setting the method to hypergeom (default) or binomial clev = confidence level as a proportion 11.1.2 Input and Output The rasters that are used in this tutorial need to have cells with suitability values. These kind of rasters can be created by using the function niche.G (see tutorial Projecting an estimated niche into G-space). The output are information on the number of cells in study area, the number of occurrence points, and the probability of selecting an occurrence point. Additionally, three graphs are generated: the subregions and occurrences mapped in the geographical space, the subregions and occurrences mapped into the environmental space (as a 2D or 3D plot, depending on the number of environmental variables), and a graph of the accumulation curve. The output of get.table is a matrix with geographical information, a suitability index, environmental information. The function get.curve produces a list that contains information on the calculated curve. The output of plot.aco is a plot of the accumulation curve. The function accum.occ produces plots and a matrix with information on the accumulation curve: EDIT EDIT EDIT 11.2 Worked Examples 11.2.1 Read libraries and source codes source(&quot;.\\\\Functions\\\\accumulation_curve_test.R&quot;) library(dismo) library(maptools) library(rgdal) library(raster) 11.2.2 Catasticta nimbice with three environmental layers For this example, three environmental layers instead of the usual two are used. Input files Catasticta_nimbice_occ_G.csv cn_maha3_cropped.tif cn_bio1_cropped.tif cn_bio6_cropped.tif cn_bio12_cropped.tif Prepare parameters Read the necessary input files. Besides the occurrence points of Catasticta nimbice, all the raster files have been created in previous tutorials (see tutorials for the Mahalanobis distance and Initial Data). # read matrix with information on three environmental variables cn.occG &lt;- read.csv(&quot;./Initial_Data/Catasticta_nimbice_occ_G.csv&quot;,header=T)[,-1] # read raster with calculated suitability index of three environmental layers cnmaha3 &lt;- raster(&quot;./Generated_Data/cn_maha3_cropped.tif&quot;) # read raster files bio1cn &lt;- raster(&quot;./Generated_Data/cn_bio1_cropped.tif&quot;) bio6cn &lt;- raster(&quot;./Generated_Data/cn_bio6_cropped.tif&quot;) bio12cn &lt;- raster(&quot;./Generated_Data/cn_bio12_cropped.tif&quot;) 1) Using the functions get.table, get.curve, and plot.aco Create the necessary input for the parameters names, G.occ, suit.Estck, and names. # stack rasters and define names for stacked layers maha.stack &lt;- stack(cnmaha3, bio1cn, bio6cn, bio12cn) names(maha.stack) &lt;- c(&quot;suitability&quot;,&quot;Bio1&quot;,&quot;Bio6&quot;,&quot;Bio12&quot;) Apply the function get.table. table.cn &lt;- get.table(G.occ = cn.occG, suit.Estck = maha.stack) head(table.cn, n=4) ## x y suitability Bio1 Bio6 Bio12 Type ## 59 -99.61444 18.92194 0.9512103 178 49 1129 1 ## 130 -103.40972 20.71000 0.7841870 193 64 954 1 ## 92 -100.47639 19.47222 0.7789280 184 61 913 1 ## 110 -101.75917 20.15306 0.7786452 190 48 816 1 Apply the function get.curve. curve.cn &lt;- get.curve(occ.suit = table.cn[table.cn$Type==1,][,3], mod.suit = table.cn[table.cn$Type==0,][,3]) The first output provides 1) the number of cells in study area, 2) the number of occurrences, and 3) the prevalence (number of occurrences / number of cells in G). round(curve.cn$out1,3) ## [1] 7271.000 154.000 0.021 The second output provides the number of accumulated number of cells in the subregions and the accumulated number of occurrences in the subregions. These are the values of the intervals between steps of a curve. head(curve.cn$out2, n=6) ## [,1] [,2] ## [1,] 0 0 ## [2,] 4 1 ## [3,] 102 2 ## [4,] 108 3 ## [5,] 109 4 ## [6,] 118 5 Plot the curve with plot.aco with the species name for the parameter species, the results from get.curve as aco.curve, 95% confidence level and the model set to hypergeom. # x11() plot.aco(species = &quot;Catasticta nimbice&quot;, aco.curve = curve.cn, conlev = 0.95, model = &quot;hypergeom&quot;) ## [1] Number of cells in study area: 7271 ## [1] Number of occurrence points: 154 ## [1] Probability of selecting an occurrence point: 0.0207 To save the plot (as a PNG), the code for applying the function needs to be placed within the plot for saving a picture. png(paste0(&quot;./Generated_Data/Catasticta_nimbice&quot;,&quot;_maha_curve.png&quot;),width = 2300, height = 2300, res = 600, pointsize = 6) plot.aco(species = &quot;Catasticta nimbice&quot;, aco.curve = curve.cn, conlev = 0.95, model = &quot;hypergeom&quot;) dev.off() Figure 8.1: Figure of the accumulation curve for Catasticta nimbice. 2) Using the function accum.occ directly Directly apply the accumulation curve that has the functions get.table, get.curve, and plot.aco integrated. For this, the parameters names, G.occ, and suit.Estck are necessary (the latter two have already been prepared). # set names for species and layers spname &lt;- &quot;Catasticta_nimbice&quot; bio1 &lt;- &quot;Annual mean temperature (°C*10)&quot; bio6 &lt;- &quot;Minimum temperature of the coldest month (°C*10)&quot; bio12 &lt;- &quot;Annual precipitation (mm)&quot; Apply the function. The model will be set to hypergeom (default) and the confidence level to 95%. cnmaha.curve &lt;- accum.occ(names = c(spname, bio1, bio6, bio12), G.occ = cn.occG, suit.Estck = maha.stack, null.mod=&quot;hypergeom&quot;,clev=0.95) ## [1] Number of cells in study area: 7271 ## [1] Number of occurrence points: 154 ## [1] Probability of selecting an occurrence point: 0.0207 Figure 6.2: Figure of the geographical space with suitable niches for Catasticta nimbice. Figure 9.1: Figure of the environmental space with suitable niches for Catasticta nimbice. Figure 11.1: Figure of the accumulation curve for Catasticta nimbice. 11.2.3 Threnetes ruckeri with two environmental layers For this example, three different suitability models are applied: the weighted normal distribution, the Mahalanobis distance, and the Bayesian model. Only the graphs of the Mahalanobis model are displayed in this tutorial. The calculations are a preparation for the next anaylsis: comparing the curves. Input files Threnetes_ruckeri_occ_G.csv tr_wn_cropped.tif tr_maha_cropped.tif tr_bio1_cropped.tif tr_bio12_cropped.tif Prepare parameters # read matrix with information on mapped occurrences of the species thr.occG &lt;- read.csv(&quot;./Initial_Data/Threnetes_ruckeri_occ_G.csv&quot;,header=T)[,-1] # read raster with calculated suitability index of three environmental layers thrwn &lt;- raster(&quot;./Generated_Data/tr_wn_cropped.tif&quot;) thrmaha &lt;- raster(&quot;./Generated_Data/tr_maha_cropped.tif&quot;) thrbay &lt;- raster(&quot;./Generated_Data/tr_bay_cropped.tif&quot;) # read raster files bio1th &lt;- raster(&quot;./Generated_Data/tr_bio1_cropped.tif&quot;) bio12th &lt;- raster(&quot;./Generated_Data/tr_bio12_cropped.tif&quot;) # create rasterstacks wn.stack &lt;- stack(thrwn, bio1th, bio12th) names(wn.stack) &lt;- c(&quot;suitability&quot;,&quot;Bio1&quot;,&quot;Bio12&quot;) maha.stack2 &lt;- stack(thrmaha, bio1th, bio12th) names(maha.stack2) &lt;- c(&quot;suitability&quot;,&quot;Bio1&quot;,&quot;Bio12&quot;) bay.stack &lt;- stack(thrbay, bio1th, bio12th) names(bay.stack) &lt;- c(&quot;suitability&quot;,&quot;Bio1&quot;,&quot;Bio12&quot;) # set names for species and layers spname2 &lt;- &quot;Threnetes_ruckeri&quot; bio1 &lt;- &quot;Annual mean temperature (°C*10)&quot; bio12 &lt;- &quot;Annual precipitation (mm)&quot; Apply the function Apply the function for the Mahalanobis distance model. The flag is set to TRUE to give all graphs and a matrix as an output. thrmaha.curve &lt;- accum.occ(names = c(spname2, bio1, bio12),G.occ = thr.occG, suit.Estck = maha.stack2, null.mod=&quot;hypergeom&quot;,clev=0.95, flag=T) ## [1] Number of cells in study area: 4170 ## [1] Number of occurrence points: 171 ## [1] Probability of selecting an occurrence point: 0.0394 head(thrmaha.curve, n=5) ## No.occurrences No.cells %Gained Occ %Area ## [1,] 0 0 0.00 0.00 ## [2,] 1 5 0.58 0.12 ## [3,] 2 6 1.17 0.14 ## [4,] 3 7 1.75 0.17 ## [5,] 4 13 2.34 0.31 tail(thrmaha.curve, n=5) ## No.occurrences No.cells %Gained Occ %Area ## [150,] 167 3435 97.66 82.37 ## [151,] 168 3469 98.25 83.19 ## [152,] 169 3510 98.83 84.17 ## [153,] 170 3773 99.42 90.48 ## [154,] 171 4170 100.00 100.00 Figure 11.2: Figure of the geographical space with suitable niches for Threnetes ruckeri. Figure 11.3: Figure of the environmental space with suitable niches for Threnetes ruckeri. Figure 11.4: Figure of the accumulation curve for Threnetes ruckeri. Apply the function for the weighted normal distribution model. In this version, the flag is set to false and only the matrix will be given as an output. thrwn.curve &lt;- accum.occ(names = c(spname2, bio1, bio12),G.occ = thr.occG, suit.Estck = wn.stack,null.mod=&quot;hypergeom&quot;,clev=0.95, flag=F) head(thrwn.curve, n=4) ## No.occurrences No.cells %Gained Occ %Area ## [1,] 0 0 0.00 0.00 ## [2,] 1 1 0.58 0.02 ## [3,] 2 2 1.17 0.05 ## [4,] 3 3 1.75 0.07 Apply the function for the bayesian model. thrbay.curve &lt;- accum.occ(names = c(spname2, bio1, bio12),G.occ = thr.occG, suit.Estck = bay.stack, null.mod=&quot;hypergeom&quot;,clev=0.95, flag = F) head(thrbay.curve, n=4) ## No.occurrences No.cells %Gained Occ %Area ## [1,] 0 0 0.00 0.00 ## [2,] 1 2 0.58 0.05 ## [3,] 2 25 1.17 0.60 ## [4,] 3 26 1.75 0.62 11.3 Comparing the accumulation curves The function compare.aco compares the occurrence-accumulation curves of different SDM/ENMs for a single species. compare.aco(mods, nocc, ncells, xrange=c(0,ncells), sp.name, mods.names, alpha) 11.3.1 Parameters mods = list with as much elements as models to be compared, each element must be the resulting matrix of values from the function accum.occ applied to the same occurrence data (first two columns only) nocc = number of occurrence points ncells = number of cells in M sp.name = character chain with the name of the species under study mods.names = character vector with the names of the SDMs to be compared, must have the same length as mods alpha = values between 0 and 1 representing the probability of the CI for the null model 11.3.2 Input and Output The necessary parameters for this function are the results of the accumulation curve. The output of this function is a plot that displays the accumulation curve of the models that are to be compared. 11.3.3 Worked example: Threnetes ruckeri First, create a list with all the matrices using only the first two columns of the matrix created by the accumulation curve. models3 &lt;- list(thrmaha.curve[,1:2], thrwn.curve[,1:2], thrbay.curve[,1:2]) Next, apply the function that draws all the models in a single plot. compare.aco(mods=models3, nocc=171, ncells=4170, sp.name=spname2, mods.names=c(&quot;Mahalanobis&quot;,&quot;Weigthed-Normal&quot;, &quot;Bayesian&quot;),alpha=0.95) Figure 11.5: Figure of the comparison between the accumulation curve created by the Mahalanobis distance model, the weigthed normal model, and the Bayesian model for the species Threnetes ruckeri. As the plot shows, the weighted normal distribution model and the Bayesian model have better estimates than the Mahalanobis model as their curve is above the latter. Plot of all three suitability ellipses in the environmental space: # load environmental space of occurrence points and background points for the plot thr.occE &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T)[,-(1:2)] thr.ME &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_M_GE.csv&quot;,header=T)[,-(1:2)] # load csv-files with estimated parameters for all three models for the ellipses trpar1 &lt;- read.csv(&quot;./Generated_Data/tr_mu_sigma_estimates.csv&quot;,header=T)[,-1] trpar2 &lt;- read.csv(&quot;./Generated_Data/tr_bay_mu_sigma_estimates.csv&quot;,header=T) # calculate ellipses el.maha &lt;- ellipse::ellipse(x=cbind(trpar1$maha.sigma1,trpar1$maha.sigma2), centre=trpar1$maha.mu, level=0.99) el.wn &lt;- ellipse::ellipse(x=cbind(trpar1$wn.sigma1, trpar1$wn.sigma2), centre=trpar1$wn.mu, level=0.99) el.bay &lt;- ellipse::ellipse(x=cbind(trpar2$Sigma1, trpar2$Sigma2), centre=trpar2$mu, level=0.99) ## plot # set colorpalette colpal &lt;- c(&quot;grey70&quot;, &quot;chartreuse4&quot;, &quot;coral2&quot;, &quot;cadetblue3&quot;, &quot;slateblue4&quot;) # x11() plot(thr.ME,col=colpal[1],pch=1, xlab=&quot;Annual mean temperature (°C*10)&quot;, ylab=&quot;Annual precipitation (mm)&quot;, xlim= c(0, 320), ylim= c(0, 8000)) # add presence points to the plot points(thr.occE,col=colpal[3],pch=20,cex=1.5) # presences used in model # add center points for the ellipses points(rbind(trpar1$maha.mu,trpar1$wn.mu, trpar2$mu), col= c(colpal[4], colpal[2], colpal[5]), pch=20, cex=1.5) # ellipse maha lines(el.maha,col=colpal[4],lwd=2) # ellipse wn lines(el.wn,col=colpal[2],lwd=2) # ellipse bayesian lines(el.bay,col=colpal[5],lwd=2) sp.leg &lt;- paste(&quot;Threnetes ruckeri&quot;,&quot;(&quot;,nrow(thr.occE),&quot;)&quot;) legend(&quot;topleft&quot;,legend = c(sp.leg,&quot;Points inside M&quot;,&quot;Presences&quot;, &quot;Ellipse from Mahalanobis method&quot;, &quot;Ellipse from weighted-normal model&quot;, &quot;Ellipse from Bayesian model&quot;), pch=c(NA,1,19,NA,NA, NA),col = c(&quot;white&quot;, colpal[1], colpal[3], colpal[4], colpal[2], colpal[5]), lwd=c(NA,NA,NA,2,2,2),bty = &quot;n&quot;) Figure 11.6: Figure of the three models in Espace for the species Threnetes ruckeri. "],["bayesian-model-adding-tolerance-limits.html", "12 Bayesian model: adding tolerance limits 12.1 How the main functions work 12.2 Worked Example: Threnetes ruckeri 12.3 Using the Bayesian model for the projection into G-Space", " 12 Bayesian model: adding tolerance limits This tutorial shows how to use the Bayesian model with tolerance limits to create estimates for the fundamental niche of a species. Various functions are necessary for this process that are within the file Nf_Model_functions.R: priorpar, DefineSp, Supp, Initth, PlotXYEnvVars, PlotIterations, and save.all. Out of these, Supp, Initth, and PlotXYEnvVars are directly used within other functions. Other functions (Energy and Run) are used directly in the example as they need to be adjusted based on the example and estimation results. 12.1 How the main functions work The function DefineSp fixes the values for species and environmental variables that are worked with. The fixed values are Comp1 and Comp2 (providing columns), env.d (a matrix with environmental information of randomly sampled locations of a study area), env.sp (a matrix with environmental information of the presence points of a species), n (number of occurrences), m (number of randomly sampled points), N (total amount of data points, including occurrences and sample), Et (a matrix with the combined environmental information of occurrences and samples). DefineSp(env, data.sp, Comp1, Comp2) The function priorpar uses data of environmental tolerance limits (maximum and minimum) of a species to determine the values of the parameters that define the a priori distribution. priorpar(tolran, nsd, alpha) The functions Supp and Initth are essential for using the t-walk algorithm. Alongside PlotXYEnvVars, these functions are used later in the simulations. The function PlotIterations is used after calculating MCMC. It will plot a selection (indices) of the MCMC iterations. PlotIterations(info, from, thin, lev,...) The function save.all saves all the values of mu and Sigma simulated from the posterior. save.all(info, from, thin, filename) 12.1.1 Parameters env = random sample of points inside a study area that contain environmental information data.sp = a matrix that contains the occurrence points of a species and correlated environmental data Comp1 = two numbers that define the column number which contains the first environmental condition of a matrix Comp2 = two numbers that define the column number which contains the second environmental condition of a matrix tolran = a matrix that contains the minimum and maximum values of the tolerance limits of a species (two columns for min and max and as many rows as environmental variables are used) nsd = number of standard deviations covered by a tolerance range alpha = number of degrees of freedom in the a priori Wishart distribution th = a vector of five elements (first two are values of mu, 3,4, and 5 are values of A)  = with this parameter, further graphical parameters can be supplied as arguments to the plot info = a list of iterations calculated with the Rtwalk function (MCMC) from = gives the start iteration thin = the separation between iterations 12.1.2 Input and Output The files that need to be prepared to run these functions are: a matrix that contains tolerance limits of environmental conditions that a species can survive in, a matrix that contains the occurrence points of a species and correlated environmental data, and a matrix that contains a random sample of points inside a study area that are correlated with environmental information. The information on the tolerance limits of a species needs to be obtained through lab experiments. The two other files can be created by using the function get.Ecoord (see tutorial Getting environmental values for the study sites). The output are several graphs that show the tolerance limits within the environmental space as well as the iterations from the MCMC algorithm. Furthermore, a matrix with the calculated iterations will be created. 12.1.3 Dependencies Functions: Rtwalk Example: rgdal, `raster`` 12.2 Worked Example: Threnetes ruckeri 12.2.1 Read source codes and libraries source(&quot;.\\\\Functions\\\\Nf_Model_functions.R&quot;) library(Rtwalk) Input files Threnetes_ruckeri_occ_GE.csv Threnetes_ruckeri_M_GE.csv T_ruckeri_tolerances.csv 12.2.2 Main code Read files and prepare the parameters # Read random sampled points with GE information and occurrences with GE information envall &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_M_GE.csv&quot;,header=T) data &lt;- read.csv(&quot;./Generated_Data/Threnetes_ruckeri_occ_GE.csv&quot;,header=T) # Read matrix with tolerance ranges for two environmental conditions of the species limits &lt;- read.csv(&quot;./Initial_Data/T_ruckeri_tolerances.csv&quot;) # Specify species name rotule &lt;- &quot;Threnetes_ruckeri&quot; # select species color for plots spcol &lt;- &quot;royalblue3&quot; Fixing the species and environmental variables with the function DefineSp. The numbers in Comp1 and Comp2 are the numbers of the columns in the loaded matrices that contain the environmental information. After calling the function, the values Comp1, Comp2, env.d, env.sp, n, m, N, Et are fixed for further use. DefineSp( env = envall, data.sp = data, Comp1=c(3,3), Comp2=c(4,4)) n # number of occurrences ## [1] 171 head(env.sp, n=4) # environmental information of occurrence points ## bio1 bio12 ## [1,] 241 3039 ## [2,] 255 4036 ## [3,] 263 2876 ## [4,] 257 4018 m # ## [1] 599 head(env.d, n=4) # environmental information of randomly sampled points ## bio1 bio12 ## [1,] 263 2588 ## [2,] 256 4614 ## [3,] 239 586 ## [4,] 242 2450 N # number of randomly sampled points ## [1] 770 head(Et, n=4) # combined environmental information of occurrences and samples ## bio1 bio12 ## [1,] 263 2588 ## [2,] 256 4614 ## [3,] 239 586 ## [4,] 242 2450 tail(Et, n=4) ## bio1 bio12 ## [767,] 207 3575 ## [768,] 248 2918 ## [769,] 254 2261 ## [770,] 257 4018 Define a valid interval for mu, depending on the range of the environmental variables. These limits are used for the plots as well as for the function Supp. b1 &lt;- 10 b2 &lt;- 100 mu.lim &lt;&lt;- c(min(Et[,1],limits[1,2])-b1,max(Et[,1],limits[1,3])+b1, min(Et[,2],limits[2,2])-b2,max(Et[,2],limits[2,3])+b2) Apply the function priorpar to calculate a priori parameters with the tolerance limits. # number of d.f. in the a priori Wishart distribution alpha0 &lt;&lt;- 2 # Apply function priorpar(limits[,2:3], nsd=6, alpha=alpha0) # a priori mean mu0 ## [1] 250 2750 # precision matrix (A0 &lt;&lt;- chol2inv(CholSigma0)) ## [,1] [,2] ## [1,] 0.0036 0.000000e+00 ## [2,] 0.0000 1.777778e-06 # scale matrix (W0 &lt;&lt;- chol2inv(CholW)) ## [,1] [,2] ## [1,] 138.8889 0 ## [2,] 0.0000 281250 # covariance matrix (Sigma0 &lt;&lt;- t(CholSigma0) %*% CholSigma0) ## [,1] [,2] ## [1,] 277.7778 0 ## [2,] 0.0000 562500 Plot the the a priori parameters as an ellipse and the tolerance limits as a rectangle in the environmental space. # create an ellipse with a 95% confidence region (=lev) el &lt;- ellipse::ellipse(x = Sigma0, centre = mu0,level = 0.95) # x11() # Plot background points plot(env.d, pch=1, col= &quot;grey80&quot;, xlim=mu.lim[1:2], ylim=mu.lim[3:4], xlab=&quot;Mean Annual Temperature (°C *10)&quot;, ylab=&quot;Total Annual Precipitation (mm)&quot;,main=&quot;Environmental space&quot;) # add occurrences points(env.sp, pch=19, col=spcol) # add tolerance limits rect(xleft = limits[1,2], xright= limits[1,3], ybottom = limits[2,2], ytop = limits[2,3], border=&quot;gold&quot;, lwd=2) # add ellipse corresponding to the selected confidence region lines(el,col=&quot;gold&quot;,lwd=2) legend(&quot;topleft&quot;,legend=c(rotule, &quot;Species presences&quot;, &quot;Points inside M&quot;, &quot;Tolerance ranges&quot;),pch=c(NA,19,1,NA), bty=&quot;n&quot;,lty=c(0,0,0,1),col=c(&quot;white&quot;, spcol, &quot;grey80&quot;, &quot;gold&quot;),lwd=2) Figure 2.3: Figure of the suitable niches constructed by a priori parameters in the environmental space for the species Threnetes ruckeri . The next step is to calculate the Markov Chain Monte Carlocreate for the Bayesian model with the function Energy. It creates a negative logarithm of the posterior function of the parameters of interest. This function needs to be adjusted based on the datasets and the resulting estimations. The previously defined variables are necessary for these calculations. Another variable that is needed is the number of environmental variables in the study. In this case we have two (bio1 and bio12). dd &lt;- 2 Apply the function Engery and adjust accordingly. # This is called right after Supp: mu, A and detA are already defined, th is ignored Energy &lt;- function(th) { ax1 &lt;- (mu - mu0) ax2 &lt;- apply( env.sp, 1, function(xi) { ax&lt;-as.matrix(xi - mu); t(ax) %*% A %*% ax }) # first two terms are generic in the posterior due to the normal model S &lt;- 0.5*sum(ax2) + n*log(suma.Et) # these terms correspond to the priors: S &lt;- S + 0.5*( t(ax1) %*% A0 %*% ax1 + sum(diag(A %*% W0)) - (alpha0-dd-1)*log(detA) ) S } The next step is to run the MCMC simulation of the posterior with the output of Energy. 1000 iterations would be quite fast but it is better to use at least 10000 or 20000. The resulting values in the beginning are quite large and not of interest. The main focus should be on smaller iterations. # number of iterations niter &lt;- 10000 # draw the iterations in as many plots as dimensions where entered for Run (in this case: 5) info &lt;- Runtwalk( Tr=niter, dim=5, Obj=Energy, Supp=Supp, x0=Initth(), xp0=Initth()) ## This is the twalk for R. ## Evaluating the objective density at initial values. ## Opening 12 X 10001 matrix to save output. Sampling, check graphics divice. str(info) ## List of 8 ## $ dim : num 5 ## $ Tr : num 10000 ## $ acc : num 1227 ## $ Us : num [1:10001] 2048 2048 2048 2048 2048 ... ## $ Ups : num [1:10001] 2048 2048 2048 2048 2048 ... ## $ output : num [1:10001, 1:5] 259 259 259 259 259 ... ## $ outputp: num [1:10001, 1:5] 269 269 269 269 269 ... ## $ recacc : num [1:10000, 1:2] 2 1 2 1 1 1 1 1 2 2 ... Plot the results to check the MCMC convergence. The resulting values in the beginning are usually quite large and not of interest. Smaller iterations are of interest. Adjust the line depending on how the iterations turn out to catch the smaller iterations. # define a parameter for the number at which a line is drawn and used as a # lower limit for the plot iterations marker &lt;- 2000 # x11() plot(1:(niter+1), -info$Ups, type = &quot;l&quot;, xlab = &quot;iteration&quot;, ylab = &quot;LogPost&quot;, main = &quot;dim=5&quot;) abline(v=marker, col=&quot;red&quot;) Figure 6.2: Figure of the Bayesian iterations for the species Threnetes ruckeri marked with the lower limit. Save the results as a csv-file. From defines from which iteration the output is saved and thin defines the steps in between the iterations. fname &lt;- paste0(paste(rotule,niter,&quot;output&quot;,sep=&quot;_&quot;),&quot;.csv&quot;) save.all(info,from = marker, thin = 400, paste0(&quot;./Generated_Data/&quot;,fname)) Since the MCMC calculation simulates values of a distribution, for each simulation an ellipse can be drawn. The blue ellipse is supposed to present the best estimation for the niche of a species. However, this might not always be true and is quite dependend on the amount of iterations used. # Plot simulated ellipses # x11() PlotIterations(info, from=marker, thin=400,col=spcol, main=paste(rotule, niter, sep=&quot;_&quot;), xlim=mu.lim[1:2], ylim=mu.lim[3:4]) # a priori ellipse lines(el,col=&quot;gold&quot;,lwd=2) Figure 10.2: Figure of the suitable niches constructed by the MCMC iterations in the environmental space for the species Threnetes ruckeri . Save the values mu and Sigma into a csv-file for further use. Estimated parameters = MAPs # Define mu and Sigma mu ## [,1] ## [1,] 228.079 ## [2,] 3969.181 chol2inv(chol(A)) ## [,1] [,2] ## [1,] 1101.323 -2423.676 ## [2,] -2423.676 1851053.170 # save the estimated parameters for further use as a matrix (csv) mat &lt;- cbind(mu, chol2inv(chol(A))) colnames(mat) &lt;- c(&quot;mu&quot;, &quot;Sigma1&quot;, &quot;Sigma2&quot;) write.csv(mat,&quot;./Generated_Data/tr_bay_mu_sigma_estimates.csv&quot;,row.names = F) Output files Threnetes_ruckeri_10000_output.csv tr_bay_mu_sigma_estimates.csv 12.3 Using the Bayesian model for the projection into G-Space 12.3.1 Read source and libraries source(&quot;.\\\\Functions\\\\nicheG.R&quot;) library(rgdal) library(raster) Input files bio1.asc bio12.asc Threnetes_ruckeri.shp (and associated files) Read rasters with environmental information and stack them. bio1 &lt;- raster(&quot;.\\\\Initial_Data\\\\bio1.asc&quot;) bio2 &lt;- raster(&quot;.\\\\Initial_Data\\\\bio12.asc&quot;) bios &lt;- stack(bio1,bio2) Apply the function Niche.G to create a raster with a suitability index based on the Bayesian model. thr.bay &lt;- niche.G(Estck = bios, mu = mu, Sigma = chol2inv(chol(A))) The new raster can be either saved like this or be sized to the study area. For further application a cropped raster is necessary. Read a shapefile that defines the study area, crop the raster with it and save the result. thr.shp &lt;- readOGR(&quot;./Initial_Data/shapefiles&quot;,&quot;Threnetes_ruckeri&quot;) thr.bayc &lt;- mask(crop(thr.bay, thr.shp), thr.shp) writeRaster(thr.bayc,&quot;./Generated_Data/tr_bay_cropped.tif&quot;, overwrite = T) Plot of the suitability index of the Bayesian model. plot(thr.bayc) Output files tr_bay_cropped.tif "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
